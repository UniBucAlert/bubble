{"ast":null,"code":"import { useContext, useMemo } from 'react';\nimport merge from 'lodash/merge';\nimport { CreateContext } from './CreateContext';\n/**\n * Hook to read the create controller props from the CreateContext.\n *\n * Mostly used within a <CreateContext.Provider> (e.g. as a descendent of <Create>).\n *\n * But you can also use it without a <CreateContext.Provider>. In this case, it is up to you\n * to pass all the necessary props.\n *\n * The given props will take precedence over context values.\n *\n * @typedef {Object} CreateControllerProps\n *\n * @returns {CreateControllerProps} create controller props\n *\n * @see useCreateController for how it is filled\n *\n */\n\nexport var useCreateContext = function (props) {\n  var context = useContext( // Can't find a way to specify the RecordType when CreateContext is declared\n  // @ts-ignore\n  CreateContext); // Props take precedence over the context\n\n  return useMemo(function () {\n    return merge({}, context, props != null ? extractCreateContextProps(props) : {});\n  }, [context, props]);\n};\n/**\n * Extract only the create controller props\n *\n * @param {Object} props props passed to the useCreateContext hook\n *\n * @returns {CreateControllerProps} create controller props\n */\n\nvar extractCreateContextProps = function (_a) {\n  var basePath = _a.basePath,\n      record = _a.record,\n      defaultTitle = _a.defaultTitle,\n      onFailureRef = _a.onFailureRef,\n      onSuccessRef = _a.onSuccessRef,\n      transformRef = _a.transformRef,\n      loaded = _a.loaded,\n      loading = _a.loading,\n      redirect = _a.redirect,\n      setOnFailure = _a.setOnFailure,\n      setOnSuccess = _a.setOnSuccess,\n      setTransform = _a.setTransform,\n      resource = _a.resource,\n      save = _a.save,\n      saving = _a.saving,\n      successMessage = _a.successMessage,\n      version = _a.version;\n  return {\n    basePath: basePath,\n    record: record,\n    defaultTitle: defaultTitle,\n    onFailureRef: onFailureRef,\n    onSuccessRef: onSuccessRef,\n    transformRef: transformRef,\n    loaded: loaded,\n    loading: loading,\n    redirect: redirect,\n    setOnFailure: setOnFailure,\n    setOnSuccess: setOnSuccess,\n    setTransform: setTransform,\n    resource: resource,\n    save: save,\n    saving: saving,\n    successMessage: successMessage,\n    version: version\n  };\n};","map":{"version":3,"sources":["/node_modules/ra-core/esm/controller/details/useCreateContext.js"],"names":["useContext","useMemo","merge","CreateContext","useCreateContext","props","context","extractCreateContextProps","_a","basePath","record","defaultTitle","onFailureRef","onSuccessRef","transformRef","loaded","loading","redirect","setOnFailure","setOnSuccess","setTransform","resource","save","saving","successMessage","version"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,OAArB,QAAoC,OAApC;AACA,OAAOC,KAAP,MAAkB,cAAlB;AACA,SAASC,aAAT,QAA8B,iBAA9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIC,gBAAgB,GAAG,UAAUC,KAAV,EAAiB;AAC3C,MAAIC,OAAO,GAAGN,UAAU,EACxB;AACA;AACAG,EAAAA,aAHwB,CAAxB,CAD2C,CAK3C;;AACA,SAAOF,OAAO,CAAC,YAAY;AACvB,WAAOC,KAAK,CAAC,EAAD,EAAKI,OAAL,EAAcD,KAAK,IAAI,IAAT,GAAgBE,yBAAyB,CAACF,KAAD,CAAzC,GAAmD,EAAjE,CAAZ;AACH,GAFa,EAEX,CAACC,OAAD,EAAUD,KAAV,CAFW,CAAd;AAGH,CATM;AAUP;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIE,yBAAyB,GAAG,UAAUC,EAAV,EAAc;AAC1C,MAAIC,QAAQ,GAAGD,EAAE,CAACC,QAAlB;AAAA,MAA4BC,MAAM,GAAGF,EAAE,CAACE,MAAxC;AAAA,MAAgDC,YAAY,GAAGH,EAAE,CAACG,YAAlE;AAAA,MAAgFC,YAAY,GAAGJ,EAAE,CAACI,YAAlG;AAAA,MAAgHC,YAAY,GAAGL,EAAE,CAACK,YAAlI;AAAA,MAAgJC,YAAY,GAAGN,EAAE,CAACM,YAAlK;AAAA,MAAgLC,MAAM,GAAGP,EAAE,CAACO,MAA5L;AAAA,MAAoMC,OAAO,GAAGR,EAAE,CAACQ,OAAjN;AAAA,MAA0NC,QAAQ,GAAGT,EAAE,CAACS,QAAxO;AAAA,MAAkPC,YAAY,GAAGV,EAAE,CAACU,YAApQ;AAAA,MAAkRC,YAAY,GAAGX,EAAE,CAACW,YAApS;AAAA,MAAkTC,YAAY,GAAGZ,EAAE,CAACY,YAApU;AAAA,MAAkVC,QAAQ,GAAGb,EAAE,CAACa,QAAhW;AAAA,MAA0WC,IAAI,GAAGd,EAAE,CAACc,IAApX;AAAA,MAA0XC,MAAM,GAAGf,EAAE,CAACe,MAAtY;AAAA,MAA8YC,cAAc,GAAGhB,EAAE,CAACgB,cAAla;AAAA,MAAkbC,OAAO,GAAGjB,EAAE,CAACiB,OAA/b;AACA,SAAQ;AACJhB,IAAAA,QAAQ,EAAEA,QADN;AAEJC,IAAAA,MAAM,EAAEA,MAFJ;AAGJC,IAAAA,YAAY,EAAEA,YAHV;AAIJC,IAAAA,YAAY,EAAEA,YAJV;AAKJC,IAAAA,YAAY,EAAEA,YALV;AAMJC,IAAAA,YAAY,EAAEA,YANV;AAOJC,IAAAA,MAAM,EAAEA,MAPJ;AAQJC,IAAAA,OAAO,EAAEA,OARL;AASJC,IAAAA,QAAQ,EAAEA,QATN;AAUJC,IAAAA,YAAY,EAAEA,YAVV;AAWJC,IAAAA,YAAY,EAAEA,YAXV;AAYJC,IAAAA,YAAY,EAAEA,YAZV;AAaJC,IAAAA,QAAQ,EAAEA,QAbN;AAcJC,IAAAA,IAAI,EAAEA,IAdF;AAeJC,IAAAA,MAAM,EAAEA,MAfJ;AAgBJC,IAAAA,cAAc,EAAEA,cAhBZ;AAiBJC,IAAAA,OAAO,EAAEA;AAjBL,GAAR;AAmBH,CArBD","sourcesContent":["import { useContext, useMemo } from 'react';\nimport merge from 'lodash/merge';\nimport { CreateContext } from './CreateContext';\n/**\n * Hook to read the create controller props from the CreateContext.\n *\n * Mostly used within a <CreateContext.Provider> (e.g. as a descendent of <Create>).\n *\n * But you can also use it without a <CreateContext.Provider>. In this case, it is up to you\n * to pass all the necessary props.\n *\n * The given props will take precedence over context values.\n *\n * @typedef {Object} CreateControllerProps\n *\n * @returns {CreateControllerProps} create controller props\n *\n * @see useCreateController for how it is filled\n *\n */\nexport var useCreateContext = function (props) {\n    var context = useContext(\n    // Can't find a way to specify the RecordType when CreateContext is declared\n    // @ts-ignore\n    CreateContext);\n    // Props take precedence over the context\n    return useMemo(function () {\n        return merge({}, context, props != null ? extractCreateContextProps(props) : {});\n    }, [context, props]);\n};\n/**\n * Extract only the create controller props\n *\n * @param {Object} props props passed to the useCreateContext hook\n *\n * @returns {CreateControllerProps} create controller props\n */\nvar extractCreateContextProps = function (_a) {\n    var basePath = _a.basePath, record = _a.record, defaultTitle = _a.defaultTitle, onFailureRef = _a.onFailureRef, onSuccessRef = _a.onSuccessRef, transformRef = _a.transformRef, loaded = _a.loaded, loading = _a.loading, redirect = _a.redirect, setOnFailure = _a.setOnFailure, setOnSuccess = _a.setOnSuccess, setTransform = _a.setTransform, resource = _a.resource, save = _a.save, saving = _a.saving, successMessage = _a.successMessage, version = _a.version;\n    return ({\n        basePath: basePath,\n        record: record,\n        defaultTitle: defaultTitle,\n        onFailureRef: onFailureRef,\n        onSuccessRef: onSuccessRef,\n        transformRef: transformRef,\n        loaded: loaded,\n        loading: loading,\n        redirect: redirect,\n        setOnFailure: setOnFailure,\n        setOnSuccess: setOnSuccess,\n        setTransform: setTransform,\n        resource: resource,\n        save: save,\n        saving: saving,\n        successMessage: successMessage,\n        version: version,\n    });\n};\n"]},"metadata":{},"sourceType":"module"}