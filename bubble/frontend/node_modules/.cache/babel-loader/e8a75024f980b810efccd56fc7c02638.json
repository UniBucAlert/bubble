{"ast":null,"code":"import inflection from 'inflection';\nimport getValuesFromRecords from './getValuesFromRecords';\nimport { isObject, valuesAreArray, valuesAreBoolean, valuesAreDate, valuesAreDateString, valuesAreHtml, valuesAreInteger, valuesAreNumeric, valuesAreObject, valuesAreString } from './assertions';\nvar types = ['array', 'boolean', 'date', 'email', 'id', 'number', 'reference', 'referenceChild', 'referenceArray', 'referenceArrayChild', 'richText', 'string', 'url'];\n/**\n * Guesses an element type based on an array of values\n *\n * @example\n *     inferElementFromValues(\n *         'address',\n *         ['2 Baker Street', '1 Downing street'],\n *     );\n *     // { type: 'string', props: { source: 'address' } }\n *\n * @param {string} name Property name, e.g. 'date_of_birth'\n * @param {any[]} values an array of values from which to determine the type, e.g. [12, 34.4, 43]\n */\n\nexport var inferTypeFromValues = function (name, values) {\n  if (values === void 0) {\n    values = [];\n  }\n\n  if (name === 'id') {\n    return {\n      type: 'id',\n      props: {\n        source: name\n      }\n    };\n  }\n\n  if (name.substr(name.length - 3) === '_id') {\n    return {\n      type: 'reference',\n      props: {\n        source: name,\n        reference: inflection.pluralize(name.substr(0, name.length - 3))\n      },\n      children: {\n        type: 'referenceChild'\n      }\n    };\n  }\n\n  if (name.substr(name.length - 2) === 'Id') {\n    return {\n      type: 'reference',\n      props: {\n        source: name,\n        reference: inflection.pluralize(name.substr(0, name.length - 2))\n      },\n      children: {\n        type: 'referenceChild'\n      }\n    };\n  }\n\n  if (name.substr(name.length - 4) === '_ids') {\n    return {\n      type: 'referenceArray',\n      props: {\n        source: name,\n        reference: inflection.pluralize(name.substr(0, name.length - 4))\n      },\n      children: {\n        type: 'referenceArrayChild'\n      }\n    };\n  }\n\n  if (name.substr(name.length - 3) === 'Ids') {\n    return {\n      type: 'referenceArray',\n      props: {\n        source: name,\n        reference: inflection.pluralize(name.substr(0, name.length - 3))\n      },\n      children: {\n        type: 'referenceArrayChild'\n      }\n    };\n  }\n\n  if (values.length === 0) {\n    if (name === 'email') {\n      return {\n        type: 'email',\n        props: {\n          source: name\n        }\n      };\n    }\n\n    if (name === 'url') {\n      return {\n        type: 'url',\n        props: {\n          source: name\n        }\n      };\n    } // FIXME introspect further using name\n\n\n    return {\n      type: 'string',\n      props: {\n        source: name\n      }\n    };\n  }\n\n  if (valuesAreArray(values)) {\n    if (isObject(values[0][0])) {\n      var leafValues_1 = getValuesFromRecords(values.reduce(function (acc, vals) {\n        return acc.concat(vals);\n      }, [])); // FIXME bad visual representation\n\n      return {\n        type: 'array',\n        props: {\n          source: name\n        },\n        children: Object.keys(leafValues_1).map(function (leafName) {\n          return inferTypeFromValues(leafName, leafValues_1[leafName]);\n        })\n      };\n    } // FIXME introspect further\n\n\n    return {\n      type: 'string',\n      props: {\n        source: name\n      }\n    };\n  }\n\n  if (valuesAreBoolean(values)) {\n    return {\n      type: 'boolean',\n      props: {\n        source: name\n      }\n    };\n  }\n\n  if (valuesAreDate(values)) {\n    return {\n      type: 'date',\n      props: {\n        source: name\n      }\n    };\n  }\n\n  if (valuesAreString(values)) {\n    if (name === 'email') {\n      return {\n        type: 'email',\n        props: {\n          source: name\n        }\n      };\n    }\n\n    if (name === 'url') {\n      return {\n        type: 'url',\n        props: {\n          source: name\n        }\n      };\n    }\n\n    if (valuesAreDateString(values)) {\n      return {\n        type: 'date',\n        props: {\n          source: name\n        }\n      };\n    }\n\n    if (valuesAreHtml(values)) {\n      return {\n        type: 'richText',\n        props: {\n          source: name\n        }\n      };\n    }\n\n    return {\n      type: 'string',\n      props: {\n        source: name\n      }\n    };\n  }\n\n  if (valuesAreInteger(values) || valuesAreNumeric(values)) {\n    return {\n      type: 'number',\n      props: {\n        source: name\n      }\n    };\n  }\n\n  if (valuesAreObject(values)) {\n    // we need to go deeper\n    // Arbitrarily, choose the first prop of the first object\n    var propName_1 = Object.keys(values[0]).shift();\n    var leafValues = values.map(function (v) {\n      return v[propName_1];\n    });\n    return inferTypeFromValues(name + \".\" + propName_1, leafValues);\n  }\n\n  return {\n    type: 'string',\n    props: {\n      source: name\n    }\n  };\n};","map":{"version":3,"sources":["/node_modules/ra-core/esm/inference/inferTypeFromValues.js"],"names":["inflection","getValuesFromRecords","isObject","valuesAreArray","valuesAreBoolean","valuesAreDate","valuesAreDateString","valuesAreHtml","valuesAreInteger","valuesAreNumeric","valuesAreObject","valuesAreString","types","inferTypeFromValues","name","values","type","props","source","substr","length","reference","pluralize","children","leafValues_1","reduce","acc","vals","concat","Object","keys","map","leafName","propName_1","shift","leafValues","v"],"mappings":"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","sourcesContent":["import inflection from 'inflection';\nimport getValuesFromRecords from './getValuesFromRecords';\nimport { isObject, valuesAreArray, valuesAreBoolean, valuesAreDate, valuesAreDateString, valuesAreHtml, valuesAreInteger, valuesAreNumeric, valuesAreObject, valuesAreString, } from './assertions';\nvar types = [\n    'array',\n    'boolean',\n    'date',\n    'email',\n    'id',\n    'number',\n    'reference',\n    'referenceChild',\n    'referenceArray',\n    'referenceArrayChild',\n    'richText',\n    'string',\n    'url',\n];\n/**\n * Guesses an element type based on an array of values\n *\n * @example\n *     inferElementFromValues(\n *         'address',\n *         ['2 Baker Street', '1 Downing street'],\n *     );\n *     // { type: 'string', props: { source: 'address' } }\n *\n * @param {string} name Property name, e.g. 'date_of_birth'\n * @param {any[]} values an array of values from which to determine the type, e.g. [12, 34.4, 43]\n */\nexport var inferTypeFromValues = function (name, values) {\n    if (values === void 0) { values = []; }\n    if (name === 'id') {\n        return { type: 'id', props: { source: name } };\n    }\n    if (name.substr(name.length - 3) === '_id') {\n        return {\n            type: 'reference',\n            props: {\n                source: name,\n                reference: inflection.pluralize(name.substr(0, name.length - 3)),\n            },\n            children: { type: 'referenceChild' },\n        };\n    }\n    if (name.substr(name.length - 2) === 'Id') {\n        return {\n            type: 'reference',\n            props: {\n                source: name,\n                reference: inflection.pluralize(name.substr(0, name.length - 2)),\n            },\n            children: { type: 'referenceChild' },\n        };\n    }\n    if (name.substr(name.length - 4) === '_ids') {\n        return {\n            type: 'referenceArray',\n            props: {\n                source: name,\n                reference: inflection.pluralize(name.substr(0, name.length - 4)),\n            },\n            children: { type: 'referenceArrayChild' },\n        };\n    }\n    if (name.substr(name.length - 3) === 'Ids') {\n        return {\n            type: 'referenceArray',\n            props: {\n                source: name,\n                reference: inflection.pluralize(name.substr(0, name.length - 3)),\n            },\n            children: { type: 'referenceArrayChild' },\n        };\n    }\n    if (values.length === 0) {\n        if (name === 'email') {\n            return { type: 'email', props: { source: name } };\n        }\n        if (name === 'url') {\n            return { type: 'url', props: { source: name } };\n        }\n        // FIXME introspect further using name\n        return { type: 'string', props: { source: name } };\n    }\n    if (valuesAreArray(values)) {\n        if (isObject(values[0][0])) {\n            var leafValues_1 = getValuesFromRecords(values.reduce(function (acc, vals) { return acc.concat(vals); }, []));\n            // FIXME bad visual representation\n            return {\n                type: 'array',\n                props: { source: name },\n                children: Object.keys(leafValues_1).map(function (leafName) {\n                    return inferTypeFromValues(leafName, leafValues_1[leafName]);\n                }),\n            };\n        }\n        // FIXME introspect further\n        return { type: 'string', props: { source: name } };\n    }\n    if (valuesAreBoolean(values)) {\n        return { type: 'boolean', props: { source: name } };\n    }\n    if (valuesAreDate(values)) {\n        return { type: 'date', props: { source: name } };\n    }\n    if (valuesAreString(values)) {\n        if (name === 'email') {\n            return { type: 'email', props: { source: name } };\n        }\n        if (name === 'url') {\n            return { type: 'url', props: { source: name } };\n        }\n        if (valuesAreDateString(values)) {\n            return { type: 'date', props: { source: name } };\n        }\n        if (valuesAreHtml(values)) {\n            return { type: 'richText', props: { source: name } };\n        }\n        return { type: 'string', props: { source: name } };\n    }\n    if (valuesAreInteger(values) || valuesAreNumeric(values)) {\n        return { type: 'number', props: { source: name } };\n    }\n    if (valuesAreObject(values)) {\n        // we need to go deeper\n        // Arbitrarily, choose the first prop of the first object\n        var propName_1 = Object.keys(values[0]).shift();\n        var leafValues = values.map(function (v) { return v[propName_1]; });\n        return inferTypeFromValues(name + \".\" + propName_1, leafValues);\n    }\n    return { type: 'string', props: { source: name } };\n};\n"]},"metadata":{},"sourceType":"module"}