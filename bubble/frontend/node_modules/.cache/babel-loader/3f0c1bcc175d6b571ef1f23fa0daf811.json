{"ast":null,"code":"import inflection from 'inflection';\nimport { useStore } from 'react-redux';\nimport { getResources } from '../reducer';\nimport { useTranslate } from '../i18n';\n/**\n * A hook which returns function to get a translated resource name. It will use the label option of the `Resource` component if it was provided.\n *\n * @returns {GetResourceLabel} A function which takes a resource name and an optional number indicating the number of items (used for pluralization) and returns a translated string.\n * @example\n * const Menu = () => {\n *     const resources = useSelector(getResources, shallowEqual);\n *     const getResourceLabel = useGetResourceLabel();\n *\n *     return (\n *         <ul>\n *             {resources.map(resource => (\n *                 <li key={resource.name}>\n *                     {getResourceLabel(resource.name, 2)}\n *                 </li>\n *             ))}\n *         </ul>\n *     )\n * }\n */\n\nexport var useGetResourceLabel = function () {\n  var store = useStore();\n  var translate = useTranslate();\n  return function (resource, count) {\n    if (count === void 0) {\n      count = 2;\n    }\n\n    var resourceDefinition = getResources(store.getState()).find(function (r) {\n      return (r === null || r === void 0 ? void 0 : r.name) === resource;\n    });\n    var label = translate(\"resources.\" + resource + \".name\", {\n      smart_count: count,\n      _: resourceDefinition && resourceDefinition.options && resourceDefinition.options.label ? translate(resourceDefinition.options.label, {\n        smart_count: count,\n        _: resourceDefinition.options.label\n      }) : inflection.humanize(count > 1 ? inflection.pluralize(resource) : inflection.singularize(resource))\n    });\n    return label;\n  };\n};","map":{"version":3,"sources":["/node_modules/ra-core/esm/core/useGetResourceLabel.js"],"names":["inflection","useStore","getResources","useTranslate","useGetResourceLabel","store","translate","resource","count","resourceDefinition","getState","find","r","name","label","smart_count","_","options","humanize","pluralize","singularize"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,YAAvB;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,SAASC,YAAT,QAA6B,YAA7B;AACA,SAASC,YAAT,QAA6B,SAA7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIC,mBAAmB,GAAG,YAAY;AACzC,MAAIC,KAAK,GAAGJ,QAAQ,EAApB;AACA,MAAIK,SAAS,GAAGH,YAAY,EAA5B;AACA,SAAO,UAAUI,QAAV,EAAoBC,KAApB,EAA2B;AAC9B,QAAIA,KAAK,KAAK,KAAK,CAAnB,EAAsB;AAAEA,MAAAA,KAAK,GAAG,CAAR;AAAY;;AACpC,QAAIC,kBAAkB,GAAGP,YAAY,CAACG,KAAK,CAACK,QAAN,EAAD,CAAZ,CAA+BC,IAA/B,CAAoC,UAAUC,CAAV,EAAa;AAAE,aAAO,CAACA,CAAC,KAAK,IAAN,IAAcA,CAAC,KAAK,KAAK,CAAzB,GAA6B,KAAK,CAAlC,GAAsCA,CAAC,CAACC,IAAzC,MAAmDN,QAA1D;AAAqE,KAAxH,CAAzB;AACA,QAAIO,KAAK,GAAGR,SAAS,CAAC,eAAeC,QAAf,GAA0B,OAA3B,EAAoC;AACrDQ,MAAAA,WAAW,EAAEP,KADwC;AAErDQ,MAAAA,CAAC,EAAEP,kBAAkB,IACjBA,kBAAkB,CAACQ,OADpB,IAECR,kBAAkB,CAACQ,OAAnB,CAA2BH,KAF5B,GAGGR,SAAS,CAACG,kBAAkB,CAACQ,OAAnB,CAA2BH,KAA5B,EAAmC;AAC1CC,QAAAA,WAAW,EAAEP,KAD6B;AAE1CQ,QAAAA,CAAC,EAAEP,kBAAkB,CAACQ,OAAnB,CAA2BH;AAFY,OAAnC,CAHZ,GAOGd,UAAU,CAACkB,QAAX,CAAoBV,KAAK,GAAG,CAAR,GAChBR,UAAU,CAACmB,SAAX,CAAqBZ,QAArB,CADgB,GAEhBP,UAAU,CAACoB,WAAX,CAAuBb,QAAvB,CAFJ;AAT+C,KAApC,CAArB;AAaA,WAAOO,KAAP;AACH,GAjBD;AAkBH,CArBM","sourcesContent":["import inflection from 'inflection';\nimport { useStore } from 'react-redux';\nimport { getResources } from '../reducer';\nimport { useTranslate } from '../i18n';\n/**\n * A hook which returns function to get a translated resource name. It will use the label option of the `Resource` component if it was provided.\n *\n * @returns {GetResourceLabel} A function which takes a resource name and an optional number indicating the number of items (used for pluralization) and returns a translated string.\n * @example\n * const Menu = () => {\n *     const resources = useSelector(getResources, shallowEqual);\n *     const getResourceLabel = useGetResourceLabel();\n *\n *     return (\n *         <ul>\n *             {resources.map(resource => (\n *                 <li key={resource.name}>\n *                     {getResourceLabel(resource.name, 2)}\n *                 </li>\n *             ))}\n *         </ul>\n *     )\n * }\n */\nexport var useGetResourceLabel = function () {\n    var store = useStore();\n    var translate = useTranslate();\n    return function (resource, count) {\n        if (count === void 0) { count = 2; }\n        var resourceDefinition = getResources(store.getState()).find(function (r) { return (r === null || r === void 0 ? void 0 : r.name) === resource; });\n        var label = translate(\"resources.\" + resource + \".name\", {\n            smart_count: count,\n            _: resourceDefinition &&\n                resourceDefinition.options &&\n                resourceDefinition.options.label\n                ? translate(resourceDefinition.options.label, {\n                    smart_count: count,\n                    _: resourceDefinition.options.label,\n                })\n                : inflection.humanize(count > 1\n                    ? inflection.pluralize(resource)\n                    : inflection.singularize(resource)),\n        });\n        return label;\n    };\n};\n"]},"metadata":{},"sourceType":"module"}