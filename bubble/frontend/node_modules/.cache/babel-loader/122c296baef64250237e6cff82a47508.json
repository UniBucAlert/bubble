{"ast":null,"code":"import * as React from 'react';\nimport { TranslatableContextProvider, useTranslatable } from 'ra-core';\nimport { TranslatableInputsTabs } from './TranslatableInputsTabs';\nimport { TranslatableInputsTabContent } from './TranslatableInputsTabContent';\nimport { makeStyles } from '@material-ui/core/styles';\n/**\n * Provides a way to edit multiple languages for any input passed as children.\n * It expects the translatable values to have the following structure:\n * {\n *     name: {\n *         en: 'The english value',\n *         fr: 'The french value',\n *         tlh: 'The klingon value',\n *     },\n *     description: {\n *         en: 'The english value',\n *         fr: 'The french value',\n *         tlh: 'The klingon value',\n *     }\n * }\n *\n * @example <caption>Basic usage</caption>\n * <TranslatableInputs locales={['en', 'fr']}>\n *     <TextInput source=\"title\" />\n *     <RichTextInput source=\"description\" />\n * </Translatable>\n *\n * @example <caption>With a custom language selector</caption>\n * <TranslatableInputs\n *     selector={<MyLanguageSelector />}\n *     locales={['en', 'fr']}\n * >\n *     <TextInput source=\"title\" />\n * </Translatable>\n *\n * const MyLanguageSelector = () => {\n *     const {\n *         locales,\n *         selectedLocale,\n *         selectLocale,\n *     } = useTranslatableContext();\n *\n *     return (\n *         <select onChange={event => selectLocale(event.target.value)}>\n *             {locales.map((locale) => (\n *                 <option selected={locale === selectedLocale}>\n *                     {locale}\n *                 </option>\n *             ))}\n *        </select>\n *     );\n * }\n *\n * * @param props The component props\n * * @param {string} props.defaultLocale The locale selected by default. Default to 'en'.\n * * @param {string[]} props.locales An array of the possible locales. For example: `['en', 'fr'].\n * * @param {ReactElement} props.selector The element responsible for selecting a locale. Defaults to Material UI tabs.\n */\n\nexport var TranslatableInputs = function (props) {\n  var defaultLocale = props.defaultLocale,\n      locales = props.locales,\n      _a = props.groupKey,\n      groupKey = _a === void 0 ? '' : _a,\n      _b = props.selector,\n      selector = _b === void 0 ? React.createElement(TranslatableInputsTabs, {\n    groupKey: groupKey\n  }) : _b,\n      children = props.children;\n  var context = useTranslatable({\n    defaultLocale: defaultLocale,\n    locales: locales\n  });\n  var classes = useStyles(props);\n  return React.createElement(\"div\", {\n    className: classes.root\n  }, React.createElement(TranslatableContextProvider, {\n    value: context\n  }, selector, locales.map(function (locale) {\n    return React.createElement(TranslatableInputsTabContent, {\n      key: locale,\n      locale: locale,\n      groupKey: groupKey\n    }, children);\n  })));\n};\nvar useStyles = makeStyles(function (theme) {\n  return {\n    root: {\n      flexGrow: 1,\n      marginTop: theme.spacing(1),\n      marginBottom: theme.spacing(0.5)\n    }\n  };\n}, {\n  name: 'RaTranslatableInputs'\n});","map":{"version":3,"sources":["/node_modules/ra-ui-materialui/esm/input/TranslatableInputs.js"],"names":["React","TranslatableContextProvider","useTranslatable","TranslatableInputsTabs","TranslatableInputsTabContent","makeStyles","TranslatableInputs","props","defaultLocale","locales","_a","groupKey","_b","selector","createElement","children","context","classes","useStyles","className","root","value","map","locale","key","theme","flexGrow","marginTop","spacing","marginBottom","name"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,2BAAT,EAAsCC,eAAtC,QAA8D,SAA9D;AACA,SAASC,sBAAT,QAAuC,0BAAvC;AACA,SAASC,4BAAT,QAA6C,gCAA7C;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIC,kBAAkB,GAAG,UAAUC,KAAV,EAAiB;AAC7C,MAAIC,aAAa,GAAGD,KAAK,CAACC,aAA1B;AAAA,MAAyCC,OAAO,GAAGF,KAAK,CAACE,OAAzD;AAAA,MAAkEC,EAAE,GAAGH,KAAK,CAACI,QAA7E;AAAA,MAAuFA,QAAQ,GAAGD,EAAE,KAAK,KAAK,CAAZ,GAAgB,EAAhB,GAAqBA,EAAvH;AAAA,MAA2HE,EAAE,GAAGL,KAAK,CAACM,QAAtI;AAAA,MAAgJA,QAAQ,GAAGD,EAAE,KAAK,KAAK,CAAZ,GAAgBZ,KAAK,CAACc,aAAN,CAAoBX,sBAApB,EAA4C;AAAEQ,IAAAA,QAAQ,EAAEA;AAAZ,GAA5C,CAAhB,GAAsFC,EAAjP;AAAA,MAAqPG,QAAQ,GAAGR,KAAK,CAACQ,QAAtQ;AACA,MAAIC,OAAO,GAAGd,eAAe,CAAC;AAAEM,IAAAA,aAAa,EAAEA,aAAjB;AAAgCC,IAAAA,OAAO,EAAEA;AAAzC,GAAD,CAA7B;AACA,MAAIQ,OAAO,GAAGC,SAAS,CAACX,KAAD,CAAvB;AACA,SAAQP,KAAK,CAACc,aAAN,CAAoB,KAApB,EAA2B;AAAEK,IAAAA,SAAS,EAAEF,OAAO,CAACG;AAArB,GAA3B,EACJpB,KAAK,CAACc,aAAN,CAAoBb,2BAApB,EAAiD;AAAEoB,IAAAA,KAAK,EAAEL;AAAT,GAAjD,EACIH,QADJ,EAEIJ,OAAO,CAACa,GAAR,CAAY,UAAUC,MAAV,EAAkB;AAAE,WAAQvB,KAAK,CAACc,aAAN,CAAoBV,4BAApB,EAAkD;AAAEoB,MAAAA,GAAG,EAAED,MAAP;AAAeA,MAAAA,MAAM,EAAEA,MAAvB;AAA+BZ,MAAAA,QAAQ,EAAEA;AAAzC,KAAlD,EAAuGI,QAAvG,CAAR;AAA4H,GAA5J,CAFJ,CADI,CAAR;AAIH,CARM;AASP,IAAIG,SAAS,GAAGb,UAAU,CAAC,UAAUoB,KAAV,EAAiB;AAAE,SAAQ;AAClDL,IAAAA,IAAI,EAAE;AACFM,MAAAA,QAAQ,EAAE,CADR;AAEFC,MAAAA,SAAS,EAAEF,KAAK,CAACG,OAAN,CAAc,CAAd,CAFT;AAGFC,MAAAA,YAAY,EAAEJ,KAAK,CAACG,OAAN,CAAc,GAAd;AAHZ;AAD4C,GAAR;AAMzC,CANqB,EAMnB;AAAEE,EAAAA,IAAI,EAAE;AAAR,CANmB,CAA1B","sourcesContent":["import * as React from 'react';\nimport { TranslatableContextProvider, useTranslatable, } from 'ra-core';\nimport { TranslatableInputsTabs } from './TranslatableInputsTabs';\nimport { TranslatableInputsTabContent } from './TranslatableInputsTabContent';\nimport { makeStyles } from '@material-ui/core/styles';\n/**\n * Provides a way to edit multiple languages for any input passed as children.\n * It expects the translatable values to have the following structure:\n * {\n *     name: {\n *         en: 'The english value',\n *         fr: 'The french value',\n *         tlh: 'The klingon value',\n *     },\n *     description: {\n *         en: 'The english value',\n *         fr: 'The french value',\n *         tlh: 'The klingon value',\n *     }\n * }\n *\n * @example <caption>Basic usage</caption>\n * <TranslatableInputs locales={['en', 'fr']}>\n *     <TextInput source=\"title\" />\n *     <RichTextInput source=\"description\" />\n * </Translatable>\n *\n * @example <caption>With a custom language selector</caption>\n * <TranslatableInputs\n *     selector={<MyLanguageSelector />}\n *     locales={['en', 'fr']}\n * >\n *     <TextInput source=\"title\" />\n * </Translatable>\n *\n * const MyLanguageSelector = () => {\n *     const {\n *         locales,\n *         selectedLocale,\n *         selectLocale,\n *     } = useTranslatableContext();\n *\n *     return (\n *         <select onChange={event => selectLocale(event.target.value)}>\n *             {locales.map((locale) => (\n *                 <option selected={locale === selectedLocale}>\n *                     {locale}\n *                 </option>\n *             ))}\n *        </select>\n *     );\n * }\n *\n * * @param props The component props\n * * @param {string} props.defaultLocale The locale selected by default. Default to 'en'.\n * * @param {string[]} props.locales An array of the possible locales. For example: `['en', 'fr'].\n * * @param {ReactElement} props.selector The element responsible for selecting a locale. Defaults to Material UI tabs.\n */\nexport var TranslatableInputs = function (props) {\n    var defaultLocale = props.defaultLocale, locales = props.locales, _a = props.groupKey, groupKey = _a === void 0 ? '' : _a, _b = props.selector, selector = _b === void 0 ? React.createElement(TranslatableInputsTabs, { groupKey: groupKey }) : _b, children = props.children;\n    var context = useTranslatable({ defaultLocale: defaultLocale, locales: locales });\n    var classes = useStyles(props);\n    return (React.createElement(\"div\", { className: classes.root },\n        React.createElement(TranslatableContextProvider, { value: context },\n            selector,\n            locales.map(function (locale) { return (React.createElement(TranslatableInputsTabContent, { key: locale, locale: locale, groupKey: groupKey }, children)); }))));\n};\nvar useStyles = makeStyles(function (theme) { return ({\n    root: {\n        flexGrow: 1,\n        marginTop: theme.spacing(1),\n        marginBottom: theme.spacing(0.5),\n    },\n}); }, { name: 'RaTranslatableInputs' });\n"]},"metadata":{},"sourceType":"module"}