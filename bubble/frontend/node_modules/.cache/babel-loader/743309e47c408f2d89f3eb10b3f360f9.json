{"ast":null,"code":"import { useEffect } from 'react';\nimport isEqual from 'lodash/isEqual';\nimport useGetPermissions from './useGetPermissions';\nimport { useSafeSetState } from '../util/hooks';\nvar emptyParams = {}; // keep a cache of already fetched permissions to initialize state for new\n// components and avoid a useless rerender if the permissions haven't changed\n\nvar alreadyFetchedPermissions = {\n  '{}': undefined\n};\n/**\n * Hook for getting user permissions without the loading state.\n *\n * When compared to usePermissions, this hook doesn't cause a re-render\n * when the permissions haven't changed since the last call.\n *\n * This hook doesn't handle the loading state.\n *\n * @see usePermissions\n *\n * Calls the authProvider.getPermissions() method asynchronously.\n * If the authProvider returns a rejected promise, returns empty permissions.\n *\n * The return value updates according to the request state:\n *\n * - start:   { permissions: [previously fetched permissions for these params] }\n * - success: { permissions: [permissions returned by the authProvider (usually the same as on start)] }\n * - error:   { error: [error from provider] }\n *\n * Useful to enable features based on user permissions\n *\n * @param {Object} params Any params you want to pass to the authProvider\n *\n * @returns The current auth check state. Destructure as { permissions, error }.\n *\n * @example\n *     import { usePermissionsOptimized } from 'react-admin';\n *\n *     const PostDetail = props => {\n *         const { permissions } = usePermissionsOptimized();\n *         if (permissions !== 'editor') {\n *             return <Redirect to={`posts/${props.id}/show`} />\n *         } else {\n *             return <PostEdit {...props} />\n *         }\n *     };\n */\n\nvar usePermissionsOptimized = function (params) {\n  if (params === void 0) {\n    params = emptyParams;\n  }\n\n  var key = JSON.stringify(params);\n\n  var _a = useSafeSetState({\n    permissions: alreadyFetchedPermissions[key]\n  }),\n      state = _a[0],\n      setState = _a[1];\n\n  var getPermissions = useGetPermissions();\n  useEffect(function () {\n    getPermissions(params).then(function (permissions) {\n      if (!isEqual(permissions, state.permissions)) {\n        alreadyFetchedPermissions[key] = permissions;\n        setState({\n          permissions: permissions\n        });\n      }\n    }).catch(function (error) {\n      setState({\n        error: error\n      });\n    });\n  }, [getPermissions, key]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return state;\n};\n\nexport default usePermissionsOptimized;","map":{"version":3,"sources":["/node_modules/ra-core/esm/auth/usePermissionsOptimized.js"],"names":["useEffect","isEqual","useGetPermissions","useSafeSetState","emptyParams","alreadyFetchedPermissions","undefined","usePermissionsOptimized","params","key","JSON","stringify","_a","permissions","state","setState","getPermissions","then","catch","error"],"mappings":"AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,OAAOC,OAAP,MAAoB,gBAApB;AACA,OAAOC,iBAAP,MAA8B,qBAA9B;AACA,SAASC,eAAT,QAAgC,eAAhC;AACA,IAAIC,WAAW,GAAG,EAAlB,C,CACA;AACA;;AACA,IAAIC,yBAAyB,GAAG;AAAE,QAAMC;AAAR,CAAhC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,uBAAuB,GAAG,UAAUC,MAAV,EAAkB;AAC5C,MAAIA,MAAM,KAAK,KAAK,CAApB,EAAuB;AAAEA,IAAAA,MAAM,GAAGJ,WAAT;AAAuB;;AAChD,MAAIK,GAAG,GAAGC,IAAI,CAACC,SAAL,CAAeH,MAAf,CAAV;;AACA,MAAII,EAAE,GAAGT,eAAe,CAAC;AACrBU,IAAAA,WAAW,EAAER,yBAAyB,CAACI,GAAD;AADjB,GAAD,CAAxB;AAAA,MAEIK,KAAK,GAAGF,EAAE,CAAC,CAAD,CAFd;AAAA,MAEmBG,QAAQ,GAAGH,EAAE,CAAC,CAAD,CAFhC;;AAGA,MAAII,cAAc,GAAGd,iBAAiB,EAAtC;AACAF,EAAAA,SAAS,CAAC,YAAY;AAClBgB,IAAAA,cAAc,CAACR,MAAD,CAAd,CACKS,IADL,CACU,UAAUJ,WAAV,EAAuB;AAC7B,UAAI,CAACZ,OAAO,CAACY,WAAD,EAAcC,KAAK,CAACD,WAApB,CAAZ,EAA8C;AAC1CR,QAAAA,yBAAyB,CAACI,GAAD,CAAzB,GAAiCI,WAAjC;AACAE,QAAAA,QAAQ,CAAC;AAAEF,UAAAA,WAAW,EAAEA;AAAf,SAAD,CAAR;AACH;AACJ,KAND,EAOKK,KAPL,CAOW,UAAUC,KAAV,EAAiB;AACxBJ,MAAAA,QAAQ,CAAC;AACLI,QAAAA,KAAK,EAAEA;AADF,OAAD,CAAR;AAGH,KAXD;AAYH,GAbQ,EAaN,CAACH,cAAD,EAAiBP,GAAjB,CAbM,CAAT,CAP4C,CAoBjB;;AAC3B,SAAOK,KAAP;AACH,CAtBD;;AAuBA,eAAeP,uBAAf","sourcesContent":["import { useEffect } from 'react';\nimport isEqual from 'lodash/isEqual';\nimport useGetPermissions from './useGetPermissions';\nimport { useSafeSetState } from '../util/hooks';\nvar emptyParams = {};\n// keep a cache of already fetched permissions to initialize state for new\n// components and avoid a useless rerender if the permissions haven't changed\nvar alreadyFetchedPermissions = { '{}': undefined };\n/**\n * Hook for getting user permissions without the loading state.\n *\n * When compared to usePermissions, this hook doesn't cause a re-render\n * when the permissions haven't changed since the last call.\n *\n * This hook doesn't handle the loading state.\n *\n * @see usePermissions\n *\n * Calls the authProvider.getPermissions() method asynchronously.\n * If the authProvider returns a rejected promise, returns empty permissions.\n *\n * The return value updates according to the request state:\n *\n * - start:   { permissions: [previously fetched permissions for these params] }\n * - success: { permissions: [permissions returned by the authProvider (usually the same as on start)] }\n * - error:   { error: [error from provider] }\n *\n * Useful to enable features based on user permissions\n *\n * @param {Object} params Any params you want to pass to the authProvider\n *\n * @returns The current auth check state. Destructure as { permissions, error }.\n *\n * @example\n *     import { usePermissionsOptimized } from 'react-admin';\n *\n *     const PostDetail = props => {\n *         const { permissions } = usePermissionsOptimized();\n *         if (permissions !== 'editor') {\n *             return <Redirect to={`posts/${props.id}/show`} />\n *         } else {\n *             return <PostEdit {...props} />\n *         }\n *     };\n */\nvar usePermissionsOptimized = function (params) {\n    if (params === void 0) { params = emptyParams; }\n    var key = JSON.stringify(params);\n    var _a = useSafeSetState({\n        permissions: alreadyFetchedPermissions[key],\n    }), state = _a[0], setState = _a[1];\n    var getPermissions = useGetPermissions();\n    useEffect(function () {\n        getPermissions(params)\n            .then(function (permissions) {\n            if (!isEqual(permissions, state.permissions)) {\n                alreadyFetchedPermissions[key] = permissions;\n                setState({ permissions: permissions });\n            }\n        })\n            .catch(function (error) {\n            setState({\n                error: error,\n            });\n        });\n    }, [getPermissions, key]); // eslint-disable-line react-hooks/exhaustive-deps\n    return state;\n};\nexport default usePermissionsOptimized;\n"]},"metadata":{},"sourceType":"module"}