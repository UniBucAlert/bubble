{"ast":null,"code":"import { useState, useMemo } from 'react';\nimport { useResourceContext } from '../core';\nimport { getFieldLabelTranslationArgs } from '../util';\nimport useLocale from './useLocale';\nimport useTranslate from './useTranslate';\n/**\n * Hook supplying the logic to translate a field value in multiple languages.\n *\n * @param options The hook options\n * @param {string} options.defaultLocale The locale of the default selected locale. Defaults to 'en'.\n * @param {string[]} options.locales An array of the supported locales. Each is an object with a locale and a name property. For example { locale: 'en', name: 'English' }.\n *\n * @returns\n * An object with following properties and methods:\n * - selectedLocale: The locale of the currently selected locale\n * - locales: An array of the supported locales\n * - getLabelInput: A function which returns the translated label for the given field\n * - getSource: A function which returns the source for the given field\n * - selectLocale: A function which set the selected locale\n */\n\nexport var useTranslatable = function (options) {\n  var localeFromUI = useLocale();\n  var _a = options.defaultLocale,\n      defaultLocale = _a === void 0 ? localeFromUI : _a,\n      locales = options.locales;\n\n  var _b = useState(defaultLocale),\n      selectedLocale = _b[0],\n      setSelectedLocale = _b[1];\n\n  var resource = useResourceContext({});\n  var translate = useTranslate();\n  var context = useMemo(function () {\n    return {\n      getSource: function (source, locale) {\n        if (locale === void 0) {\n          locale = selectedLocale;\n        }\n\n        return source + \".\" + locale;\n      },\n      getLabel: function (source) {\n        return translate.apply(void 0, getFieldLabelTranslationArgs({\n          source: source,\n          resource: resource,\n          label: undefined\n        }));\n      },\n      locales: locales,\n      selectedLocale: selectedLocale,\n      selectLocale: setSelectedLocale\n    };\n  }, [locales, resource, selectedLocale, translate]);\n  return context;\n};","map":{"version":3,"sources":["/node_modules/ra-core/esm/i18n/useTranslatable.js"],"names":["useState","useMemo","useResourceContext","getFieldLabelTranslationArgs","useLocale","useTranslate","useTranslatable","options","localeFromUI","_a","defaultLocale","locales","_b","selectedLocale","setSelectedLocale","resource","translate","context","getSource","source","locale","getLabel","apply","label","undefined","selectLocale"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,OAAnB,QAAkC,OAAlC;AACA,SAASC,kBAAT,QAAmC,SAAnC;AACA,SAASC,4BAAT,QAA6C,SAA7C;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIC,eAAe,GAAG,UAAUC,OAAV,EAAmB;AAC5C,MAAIC,YAAY,GAAGJ,SAAS,EAA5B;AACA,MAAIK,EAAE,GAAGF,OAAO,CAACG,aAAjB;AAAA,MAAgCA,aAAa,GAAGD,EAAE,KAAK,KAAK,CAAZ,GAAgBD,YAAhB,GAA+BC,EAA/E;AAAA,MAAmFE,OAAO,GAAGJ,OAAO,CAACI,OAArG;;AACA,MAAIC,EAAE,GAAGZ,QAAQ,CAACU,aAAD,CAAjB;AAAA,MAAkCG,cAAc,GAAGD,EAAE,CAAC,CAAD,CAArD;AAAA,MAA0DE,iBAAiB,GAAGF,EAAE,CAAC,CAAD,CAAhF;;AACA,MAAIG,QAAQ,GAAGb,kBAAkB,CAAC,EAAD,CAAjC;AACA,MAAIc,SAAS,GAAGX,YAAY,EAA5B;AACA,MAAIY,OAAO,GAAGhB,OAAO,CAAC,YAAY;AAAE,WAAQ;AACxCiB,MAAAA,SAAS,EAAE,UAAUC,MAAV,EAAkBC,MAAlB,EAA0B;AACjC,YAAIA,MAAM,KAAK,KAAK,CAApB,EAAuB;AAAEA,UAAAA,MAAM,GAAGP,cAAT;AAA0B;;AACnD,eAAOM,MAAM,GAAG,GAAT,GAAeC,MAAtB;AACH,OAJuC;AAKxCC,MAAAA,QAAQ,EAAE,UAAUF,MAAV,EAAkB;AACxB,eAAOH,SAAS,CAACM,KAAV,CAAgB,KAAK,CAArB,EAAwBnB,4BAA4B,CAAC;AACxDgB,UAAAA,MAAM,EAAEA,MADgD;AAExDJ,UAAAA,QAAQ,EAAEA,QAF8C;AAGxDQ,UAAAA,KAAK,EAAEC;AAHiD,SAAD,CAApD,CAAP;AAKH,OAXuC;AAYxCb,MAAAA,OAAO,EAAEA,OAZ+B;AAaxCE,MAAAA,cAAc,EAAEA,cAbwB;AAcxCY,MAAAA,YAAY,EAAEX;AAd0B,KAAR;AAe/B,GAfgB,EAed,CAACH,OAAD,EAAUI,QAAV,EAAoBF,cAApB,EAAoCG,SAApC,CAfc,CAArB;AAgBA,SAAOC,OAAP;AACH,CAvBM","sourcesContent":["import { useState, useMemo } from 'react';\nimport { useResourceContext } from '../core';\nimport { getFieldLabelTranslationArgs } from '../util';\nimport useLocale from './useLocale';\nimport useTranslate from './useTranslate';\n/**\n * Hook supplying the logic to translate a field value in multiple languages.\n *\n * @param options The hook options\n * @param {string} options.defaultLocale The locale of the default selected locale. Defaults to 'en'.\n * @param {string[]} options.locales An array of the supported locales. Each is an object with a locale and a name property. For example { locale: 'en', name: 'English' }.\n *\n * @returns\n * An object with following properties and methods:\n * - selectedLocale: The locale of the currently selected locale\n * - locales: An array of the supported locales\n * - getLabelInput: A function which returns the translated label for the given field\n * - getSource: A function which returns the source for the given field\n * - selectLocale: A function which set the selected locale\n */\nexport var useTranslatable = function (options) {\n    var localeFromUI = useLocale();\n    var _a = options.defaultLocale, defaultLocale = _a === void 0 ? localeFromUI : _a, locales = options.locales;\n    var _b = useState(defaultLocale), selectedLocale = _b[0], setSelectedLocale = _b[1];\n    var resource = useResourceContext({});\n    var translate = useTranslate();\n    var context = useMemo(function () { return ({\n        getSource: function (source, locale) {\n            if (locale === void 0) { locale = selectedLocale; }\n            return source + \".\" + locale;\n        },\n        getLabel: function (source) {\n            return translate.apply(void 0, getFieldLabelTranslationArgs({\n                source: source,\n                resource: resource,\n                label: undefined,\n            }));\n        },\n        locales: locales,\n        selectedLocale: selectedLocale,\n        selectLocale: setSelectedLocale,\n    }); }, [locales, resource, selectedLocale, translate]);\n    return context;\n};\n"]},"metadata":{},"sourceType":"module"}