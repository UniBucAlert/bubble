{"ast":null,"code":"import { useContext, useMemo } from 'react';\nimport merge from 'lodash/merge';\nimport { EditContext } from './EditContext';\n/**\n * Hook to read the edit controller props from the CreateContext.\n *\n * Mostly used within a <EditContext.Provider> (e.g. as a descendent of <Edit>).\n *\n * But you can also use it without a <EditContext.Provider>. In this case, it is up to you\n * to pass all the necessary props.\n *\n * The given props will take precedence over context values.\n *\n * @typedef {Object} EditControllerProps\n *\n * @returns {EditControllerProps} edit controller props\n *\n * @see useEditController for how it is filled\n *\n */\n\nexport var useEditContext = function (props) {\n  // Can't find a way to specify the RecordType when EditContext is declared\n  // @ts-ignore\n  var context = useContext(EditContext); // Props take precedence over the context\n\n  return useMemo(function () {\n    return merge({}, context, props != null ? extractEditContextProps(props) : {});\n  }, [context, props]);\n};\n/**\n * Extract only the edit controller props\n *\n * @param {Object} props props passed to the useEditContext hook\n *\n * @returns {EditControllerProps} edit controller props\n */\n\nvar extractEditContextProps = function (_a) {\n  var basePath = _a.basePath,\n      data = _a.data,\n      record = _a.record,\n      defaultTitle = _a.defaultTitle,\n      onFailureRef = _a.onFailureRef,\n      onSuccessRef = _a.onSuccessRef,\n      transformRef = _a.transformRef,\n      loaded = _a.loaded,\n      loading = _a.loading,\n      redirect = _a.redirect,\n      setOnFailure = _a.setOnFailure,\n      setOnSuccess = _a.setOnSuccess,\n      setTransform = _a.setTransform,\n      resource = _a.resource,\n      save = _a.save,\n      saving = _a.saving,\n      successMessage = _a.successMessage,\n      version = _a.version;\n  return {\n    basePath: basePath,\n    // Necessary for actions (EditActions) which expect a data prop containing the record\n    // @deprecated - to be removed in 4.0d\n    data: record || data,\n    record: record || data,\n    defaultTitle: defaultTitle,\n    onFailureRef: onFailureRef,\n    onSuccessRef: onSuccessRef,\n    transformRef: transformRef,\n    loaded: loaded,\n    loading: loading,\n    redirect: redirect,\n    setOnFailure: setOnFailure,\n    setOnSuccess: setOnSuccess,\n    setTransform: setTransform,\n    resource: resource,\n    save: save,\n    saving: saving,\n    successMessage: successMessage,\n    version: version\n  };\n};","map":{"version":3,"sources":["/node_modules/ra-core/esm/controller/details/useEditContext.js"],"names":["useContext","useMemo","merge","EditContext","useEditContext","props","context","extractEditContextProps","_a","basePath","data","record","defaultTitle","onFailureRef","onSuccessRef","transformRef","loaded","loading","redirect","setOnFailure","setOnSuccess","setTransform","resource","save","saving","successMessage","version"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,OAArB,QAAoC,OAApC;AACA,OAAOC,KAAP,MAAkB,cAAlB;AACA,SAASC,WAAT,QAA4B,eAA5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIC,cAAc,GAAG,UAAUC,KAAV,EAAiB;AACzC;AACA;AACA,MAAIC,OAAO,GAAGN,UAAU,CAACG,WAAD,CAAxB,CAHyC,CAIzC;;AACA,SAAOF,OAAO,CAAC,YAAY;AACvB,WAAOC,KAAK,CAAC,EAAD,EAAKI,OAAL,EAAcD,KAAK,IAAI,IAAT,GAAgBE,uBAAuB,CAACF,KAAD,CAAvC,GAAiD,EAA/D,CAAZ;AACH,GAFa,EAEX,CAACC,OAAD,EAAUD,KAAV,CAFW,CAAd;AAGH,CARM;AASP;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIE,uBAAuB,GAAG,UAAUC,EAAV,EAAc;AACxC,MAAIC,QAAQ,GAAGD,EAAE,CAACC,QAAlB;AAAA,MAA4BC,IAAI,GAAGF,EAAE,CAACE,IAAtC;AAAA,MAA4CC,MAAM,GAAGH,EAAE,CAACG,MAAxD;AAAA,MAAgEC,YAAY,GAAGJ,EAAE,CAACI,YAAlF;AAAA,MAAgGC,YAAY,GAAGL,EAAE,CAACK,YAAlH;AAAA,MAAgIC,YAAY,GAAGN,EAAE,CAACM,YAAlJ;AAAA,MAAgKC,YAAY,GAAGP,EAAE,CAACO,YAAlL;AAAA,MAAgMC,MAAM,GAAGR,EAAE,CAACQ,MAA5M;AAAA,MAAoNC,OAAO,GAAGT,EAAE,CAACS,OAAjO;AAAA,MAA0OC,QAAQ,GAAGV,EAAE,CAACU,QAAxP;AAAA,MAAkQC,YAAY,GAAGX,EAAE,CAACW,YAApR;AAAA,MAAkSC,YAAY,GAAGZ,EAAE,CAACY,YAApT;AAAA,MAAkUC,YAAY,GAAGb,EAAE,CAACa,YAApV;AAAA,MAAkWC,QAAQ,GAAGd,EAAE,CAACc,QAAhX;AAAA,MAA0XC,IAAI,GAAGf,EAAE,CAACe,IAApY;AAAA,MAA0YC,MAAM,GAAGhB,EAAE,CAACgB,MAAtZ;AAAA,MAA8ZC,cAAc,GAAGjB,EAAE,CAACiB,cAAlb;AAAA,MAAkcC,OAAO,GAAGlB,EAAE,CAACkB,OAA/c;AACA,SAAQ;AACJjB,IAAAA,QAAQ,EAAEA,QADN;AAEJ;AACA;AACAC,IAAAA,IAAI,EAAEC,MAAM,IAAID,IAJZ;AAKJC,IAAAA,MAAM,EAAEA,MAAM,IAAID,IALd;AAMJE,IAAAA,YAAY,EAAEA,YANV;AAOJC,IAAAA,YAAY,EAAEA,YAPV;AAQJC,IAAAA,YAAY,EAAEA,YARV;AASJC,IAAAA,YAAY,EAAEA,YATV;AAUJC,IAAAA,MAAM,EAAEA,MAVJ;AAWJC,IAAAA,OAAO,EAAEA,OAXL;AAYJC,IAAAA,QAAQ,EAAEA,QAZN;AAaJC,IAAAA,YAAY,EAAEA,YAbV;AAcJC,IAAAA,YAAY,EAAEA,YAdV;AAeJC,IAAAA,YAAY,EAAEA,YAfV;AAgBJC,IAAAA,QAAQ,EAAEA,QAhBN;AAiBJC,IAAAA,IAAI,EAAEA,IAjBF;AAkBJC,IAAAA,MAAM,EAAEA,MAlBJ;AAmBJC,IAAAA,cAAc,EAAEA,cAnBZ;AAoBJC,IAAAA,OAAO,EAAEA;AApBL,GAAR;AAsBH,CAxBD","sourcesContent":["import { useContext, useMemo } from 'react';\nimport merge from 'lodash/merge';\nimport { EditContext } from './EditContext';\n/**\n * Hook to read the edit controller props from the CreateContext.\n *\n * Mostly used within a <EditContext.Provider> (e.g. as a descendent of <Edit>).\n *\n * But you can also use it without a <EditContext.Provider>. In this case, it is up to you\n * to pass all the necessary props.\n *\n * The given props will take precedence over context values.\n *\n * @typedef {Object} EditControllerProps\n *\n * @returns {EditControllerProps} edit controller props\n *\n * @see useEditController for how it is filled\n *\n */\nexport var useEditContext = function (props) {\n    // Can't find a way to specify the RecordType when EditContext is declared\n    // @ts-ignore\n    var context = useContext(EditContext);\n    // Props take precedence over the context\n    return useMemo(function () {\n        return merge({}, context, props != null ? extractEditContextProps(props) : {});\n    }, [context, props]);\n};\n/**\n * Extract only the edit controller props\n *\n * @param {Object} props props passed to the useEditContext hook\n *\n * @returns {EditControllerProps} edit controller props\n */\nvar extractEditContextProps = function (_a) {\n    var basePath = _a.basePath, data = _a.data, record = _a.record, defaultTitle = _a.defaultTitle, onFailureRef = _a.onFailureRef, onSuccessRef = _a.onSuccessRef, transformRef = _a.transformRef, loaded = _a.loaded, loading = _a.loading, redirect = _a.redirect, setOnFailure = _a.setOnFailure, setOnSuccess = _a.setOnSuccess, setTransform = _a.setTransform, resource = _a.resource, save = _a.save, saving = _a.saving, successMessage = _a.successMessage, version = _a.version;\n    return ({\n        basePath: basePath,\n        // Necessary for actions (EditActions) which expect a data prop containing the record\n        // @deprecated - to be removed in 4.0d\n        data: record || data,\n        record: record || data,\n        defaultTitle: defaultTitle,\n        onFailureRef: onFailureRef,\n        onSuccessRef: onSuccessRef,\n        transformRef: transformRef,\n        loaded: loaded,\n        loading: loading,\n        redirect: redirect,\n        setOnFailure: setOnFailure,\n        setOnSuccess: setOnSuccess,\n        setTransform: setTransform,\n        resource: resource,\n        save: save,\n        saving: saving,\n        successMessage: successMessage,\n        version: version,\n    });\n};\n"]},"metadata":{},"sourceType":"module"}