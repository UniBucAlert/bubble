{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { EditContextProvider, ResourceContextProvider, useCheckMinimumRequiredProps, useEditController } from 'ra-core';\nimport { EditView } from './EditView';\n/**\n * Page component for the Edit view\n *\n * The `<Edit>` component renders the page title and actions,\n * fetches the record from the data provider.\n * It is not responsible for rendering the actual form -\n * that's the job of its child component (usually `<SimpleForm>`),\n * to which it passes the `record` as prop.\n *\n * The <Edit> component accepts the following props:\n *\n * - actions\n * - aside\n * - component\n * - successMessage\n * - title\n * - mutationMode\n * - undoable (deprecated)\n *\n * @example\n *\n * // in src/posts.js\n * import * as React from \"react\";\n * import { Edit, SimpleForm, TextInput } from 'react-admin';\n *\n * export const PostEdit = (props) => (\n *     <Edit {...props}>\n *         <SimpleForm>\n *             <TextInput source=\"title\" />\n *         </SimpleForm>\n *     </Edit>\n * );\n *\n * // in src/App.js\n * import * as React from \"react\";\n * import { Admin, Resource } from 'react-admin';\n *\n * import { PostEdit } from './posts';\n *\n * const App = () => (\n *     <Admin dataProvider={...}>\n *         <Resource name=\"posts\" edit={PostEdit} />\n *     </Admin>\n * );\n * export default App;\n */\n\nexport var Edit = function (props) {\n  useCheckMinimumRequiredProps('Edit', ['children'], props);\n  var controllerProps = useEditController(props);\n  var body = React.createElement(EditContextProvider, {\n    value: controllerProps\n  }, React.createElement(EditView, __assign({}, props, controllerProps)));\n  return props.resource ? // support resource override via props\n  React.createElement(ResourceContextProvider, {\n    value: props.resource\n  }, body) : body;\n};\nEdit.propTypes = {\n  actions: PropTypes.oneOfType([PropTypes.element, PropTypes.bool]),\n  aside: PropTypes.element,\n  children: PropTypes.node,\n  classes: PropTypes.object,\n  className: PropTypes.string,\n  hasCreate: PropTypes.bool,\n  hasEdit: PropTypes.bool,\n  hasShow: PropTypes.bool,\n  hasList: PropTypes.bool,\n  id: PropTypes.any.isRequired,\n  mutationMode: PropTypes.oneOf(['pessimistic', 'optimistic', 'undoable']),\n  onSuccess: PropTypes.func,\n  onFailure: PropTypes.func,\n  resource: PropTypes.string,\n  successMessage: PropTypes.string,\n  title: PropTypes.node,\n  transform: PropTypes.func,\n  undoable: PropTypes.bool\n};","map":{"version":3,"sources":["/node_modules/ra-ui-materialui/esm/detail/Edit.js"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","React","PropTypes","EditContextProvider","ResourceContextProvider","useCheckMinimumRequiredProps","useEditController","EditView","Edit","props","controllerProps","body","createElement","value","resource","propTypes","actions","oneOfType","element","bool","aside","children","node","classes","object","className","string","hasCreate","hasEdit","hasShow","hasList","id","any","isRequired","mutationMode","oneOf","onSuccess","func","onFailure","successMessage","title","transform","undoable"],"mappings":"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","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { EditContextProvider, ResourceContextProvider, useCheckMinimumRequiredProps, useEditController, } from 'ra-core';\nimport { EditView } from './EditView';\n/**\n * Page component for the Edit view\n *\n * The `<Edit>` component renders the page title and actions,\n * fetches the record from the data provider.\n * It is not responsible for rendering the actual form -\n * that's the job of its child component (usually `<SimpleForm>`),\n * to which it passes the `record` as prop.\n *\n * The <Edit> component accepts the following props:\n *\n * - actions\n * - aside\n * - component\n * - successMessage\n * - title\n * - mutationMode\n * - undoable (deprecated)\n *\n * @example\n *\n * // in src/posts.js\n * import * as React from \"react\";\n * import { Edit, SimpleForm, TextInput } from 'react-admin';\n *\n * export const PostEdit = (props) => (\n *     <Edit {...props}>\n *         <SimpleForm>\n *             <TextInput source=\"title\" />\n *         </SimpleForm>\n *     </Edit>\n * );\n *\n * // in src/App.js\n * import * as React from \"react\";\n * import { Admin, Resource } from 'react-admin';\n *\n * import { PostEdit } from './posts';\n *\n * const App = () => (\n *     <Admin dataProvider={...}>\n *         <Resource name=\"posts\" edit={PostEdit} />\n *     </Admin>\n * );\n * export default App;\n */\nexport var Edit = function (props) {\n    useCheckMinimumRequiredProps('Edit', ['children'], props);\n    var controllerProps = useEditController(props);\n    var body = (React.createElement(EditContextProvider, { value: controllerProps },\n        React.createElement(EditView, __assign({}, props, controllerProps))));\n    return props.resource ? (\n    // support resource override via props\n    React.createElement(ResourceContextProvider, { value: props.resource }, body)) : (body);\n};\nEdit.propTypes = {\n    actions: PropTypes.oneOfType([PropTypes.element, PropTypes.bool]),\n    aside: PropTypes.element,\n    children: PropTypes.node,\n    classes: PropTypes.object,\n    className: PropTypes.string,\n    hasCreate: PropTypes.bool,\n    hasEdit: PropTypes.bool,\n    hasShow: PropTypes.bool,\n    hasList: PropTypes.bool,\n    id: PropTypes.any.isRequired,\n    mutationMode: PropTypes.oneOf(['pessimistic', 'optimistic', 'undoable']),\n    onSuccess: PropTypes.func,\n    onFailure: PropTypes.func,\n    resource: PropTypes.string,\n    successMessage: PropTypes.string,\n    title: PropTypes.node,\n    transform: PropTypes.func,\n    undoable: PropTypes.bool,\n};\n"]},"metadata":{},"sourceType":"module"}