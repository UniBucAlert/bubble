{"ast":null,"code":"import * as React from 'react';\nimport { createContext, useContext } from 'react';\n/**\n * Context to store the current record.\n *\n * Use the useRecordContext() hook to read the context. That's what the Edit and Show components do in react-admin.\n *\n * @example\n *\n * import { useEditController, EditContext } from 'ra-core';\n *\n * const Edit = props => {\n *     const { record } = useEditController(props);\n *     return (\n *         <RecordContextProvider value={record}>\n *             ...\n *         </RecordContextProvider>\n *     );\n * };\n */\n\nexport var RecordContext = createContext(undefined);\nexport var RecordContextProvider = function (_a) {\n  var children = _a.children,\n      value = _a.value;\n  return React.createElement(RecordContext.Provider, {\n    value: value\n  }, children);\n};\nRecordContext.displayName = 'RecordContext';\n/**\n * Hook to read the record from a RecordContext.\n *\n * Must be used within a <RecordContext> such as provided by the <EditContextProvider>\n * (e.g. as a descendent of <Edit> or <EditBase>) or within a <ShowContextProvider>\n * (e.g. as a descendent of <Show> or <ShowBase>)\n *\n * @example // basic usage\n *\n * import { useRecordContext } from 'ra-core';\n *\n * const TitleField = () => {\n *     const record = useRecordContext();\n *     return <span>{record && record.title}</span>;\n * };\n *\n * @example // allow record override via props\n *\n * import { useRecordContext } from 'ra-core';\n *\n * const TitleField = (props) => {\n *     const record = useRecordContext(props);\n *     return <span>{record && record.title}</span>;\n * };\n * render(<TextField record={record} />);\n *\n * @returns {Record} A record object\n */\n\nexport var useRecordContext = function (props) {\n  // Can't find a way to specify the RecordType when CreateContext is declared\n  // @ts-ignore\n  var context = useContext(RecordContext);\n  return props && props.record || context;\n};","map":{"version":3,"sources":["/node_modules/ra-core/esm/controller/RecordContext.js"],"names":["React","createContext","useContext","RecordContext","undefined","RecordContextProvider","_a","children","value","createElement","Provider","displayName","useRecordContext","props","context","record"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,aAAT,EAAwBC,UAAxB,QAA0C,OAA1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIC,aAAa,GAAGF,aAAa,CAACG,SAAD,CAAjC;AACP,OAAO,IAAIC,qBAAqB,GAAG,UAAUC,EAAV,EAAc;AAC7C,MAAIC,QAAQ,GAAGD,EAAE,CAACC,QAAlB;AAAA,MAA4BC,KAAK,GAAGF,EAAE,CAACE,KAAvC;AACA,SAAQR,KAAK,CAACS,aAAN,CAAoBN,aAAa,CAACO,QAAlC,EAA4C;AAAEF,IAAAA,KAAK,EAAEA;AAAT,GAA5C,EAA8DD,QAA9D,CAAR;AACH,CAHM;AAIPJ,aAAa,CAACQ,WAAd,GAA4B,eAA5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIC,gBAAgB,GAAG,UAAUC,KAAV,EAAiB;AAC3C;AACA;AACA,MAAIC,OAAO,GAAGZ,UAAU,CAACC,aAAD,CAAxB;AACA,SAAQU,KAAK,IAAIA,KAAK,CAACE,MAAhB,IAA2BD,OAAlC;AACH,CALM","sourcesContent":["import * as React from 'react';\nimport { createContext, useContext } from 'react';\n/**\n * Context to store the current record.\n *\n * Use the useRecordContext() hook to read the context. That's what the Edit and Show components do in react-admin.\n *\n * @example\n *\n * import { useEditController, EditContext } from 'ra-core';\n *\n * const Edit = props => {\n *     const { record } = useEditController(props);\n *     return (\n *         <RecordContextProvider value={record}>\n *             ...\n *         </RecordContextProvider>\n *     );\n * };\n */\nexport var RecordContext = createContext(undefined);\nexport var RecordContextProvider = function (_a) {\n    var children = _a.children, value = _a.value;\n    return (React.createElement(RecordContext.Provider, { value: value }, children));\n};\nRecordContext.displayName = 'RecordContext';\n/**\n * Hook to read the record from a RecordContext.\n *\n * Must be used within a <RecordContext> such as provided by the <EditContextProvider>\n * (e.g. as a descendent of <Edit> or <EditBase>) or within a <ShowContextProvider>\n * (e.g. as a descendent of <Show> or <ShowBase>)\n *\n * @example // basic usage\n *\n * import { useRecordContext } from 'ra-core';\n *\n * const TitleField = () => {\n *     const record = useRecordContext();\n *     return <span>{record && record.title}</span>;\n * };\n *\n * @example // allow record override via props\n *\n * import { useRecordContext } from 'ra-core';\n *\n * const TitleField = (props) => {\n *     const record = useRecordContext(props);\n *     return <span>{record && record.title}</span>;\n * };\n * render(<TextField record={record} />);\n *\n * @returns {Record} A record object\n */\nexport var useRecordContext = function (props) {\n    // Can't find a way to specify the RecordType when CreateContext is declared\n    // @ts-ignore\n    var context = useContext(RecordContext);\n    return (props && props.record) || context;\n};\n"]},"metadata":{},"sourceType":"module"}