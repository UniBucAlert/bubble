{"ast":null,"code":"import { createContext } from 'react';\n/**\n * Context to store the current resource information.\n *\n * Use the useResource() hook to read the context. That's what most components do in react-admin.\n *\n * @example\n *\n * import { useResource, useTranslate } from 'ra-core';\n *\n * const MyCustomEditTitle = props => {\n *     const name = useResource(props);\n *\n *     return (\n *         <h1>{translate(`${name}.name`)}</h1>\n *     );\n * };\n */\n\nexport var ResourceContext = createContext(undefined);","map":{"version":3,"sources":["/node_modules/ra-core/esm/core/ResourceContext.js"],"names":["createContext","ResourceContext","undefined"],"mappings":"AAAA,SAASA,aAAT,QAA8B,OAA9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIC,eAAe,GAAGD,aAAa,CAACE,SAAD,CAAnC","sourcesContent":["import { createContext } from 'react';\n/**\n * Context to store the current resource information.\n *\n * Use the useResource() hook to read the context. That's what most components do in react-admin.\n *\n * @example\n *\n * import { useResource, useTranslate } from 'ra-core';\n *\n * const MyCustomEditTitle = props => {\n *     const name = useResource(props);\n *\n *     return (\n *         <h1>{translate(`${name}.name`)}</h1>\n *     );\n * };\n */\nexport var ResourceContext = createContext(undefined);\n"]},"metadata":{},"sourceType":"module"}