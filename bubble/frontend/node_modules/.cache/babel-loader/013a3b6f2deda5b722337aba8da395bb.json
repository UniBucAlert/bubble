{"ast":null,"code":"import { useMemo, useRef } from 'react';\nimport get from 'lodash/get';\nimport useQueryWithStore from './useQueryWithStore';\nvar defaultIds = [];\nvar defaultData = {};\n/**\n * Call the dataProvider.getList() method and return the resolved result\n * as well as the loading state.\n *\n * Uses a special cache to avoid showing an empty list while re-fetching the\n * list after changing params.\n *\n * The return value updates according to the request state:\n *\n * - start: { loading: true, loaded: false }\n * - success: { data: [data from store], ids: [ids from response], total: [total from response], loading: false, loaded: true }\n * - error: { error: [error from response], loading: false, loaded: true }\n *\n * This hook will return the cached result when called a second time\n * with the same parameters, until the response arrives.\n *\n * @param {string} resource The resource name, e.g. 'posts'\n * @param {Object} pagination The request pagination { page, perPage }, e.g. { page: 1, perPage: 10 }\n * @param {Object} sort The request sort { field, order }, e.g. { field: 'id', order: 'DESC' }\n * @param {Object} filter The request filters, e.g. { title: 'hello, world' }\n * @param {Object} options Options object to pass to the dataProvider. May include side effects to be executed upon success or failure, e.g. { onSuccess: { refresh: true } }\n *\n * @returns The current request state. Destructure as { data, total, ids, error, loading, loaded }.\n *\n * @example\n *\n * import { useGetMainList } from 'react-admin';\n *\n * const LatestNews = () => {\n *     const { data, ids, loading, error } = useGetMainList(\n *         'posts',\n *         { page: 1, perPage: 10 },\n *         { field: 'published_at', order: 'DESC' }\n *     );\n *     if (loading) { return <Loading />; }\n *     if (error) { return <p>ERROR</p>; }\n *     return <ul>{ids.map(id =>\n *         <li key={id}>{data[id].title}</li>\n *     )}</ul>;\n * };\n */\n\nexport var useGetMainList = function (resource, pagination, sort, filter, options) {\n  var requestSignature = JSON.stringify({\n    pagination: pagination,\n    sort: sort,\n    filter: filter\n  });\n  var memo = useRef({});\n\n  var _a = useQueryWithStore({\n    type: 'getList',\n    resource: resource,\n    payload: {\n      pagination: pagination,\n      sort: sort,\n      filter: filter\n    }\n  }, options, // ids and data selector\n  function (state) {\n    var ids = get(state.admin.resources, [resource, 'list', 'cachedRequests', requestSignature, 'ids']); // default value undefined\n\n    var total = get(state.admin.resources, [resource, 'list', 'cachedRequests', requestSignature, 'total']); // default value undefined\n    // When the user changes the page/sort/filter, the list of ids from\n    // the cached requests is empty. To avoid rendering an empty list\n    // at that moment, we override the ids and total with the latest\n    // loaded ones.\n\n    var mainIds = get(state.admin.resources, [resource, 'list', 'ids']); // default value [] (see list.ids reducer)\n    // Since the total can be empty during the loading phase\n    // We need to override that total with the latest loaded one\n\n    var mainTotal = get(state.admin.resources, [resource, 'list', 'total']); // default value null (see list.total reducer)\n    // Is [] for a page that was never loaded\n\n    var finalIds = typeof ids === 'undefined' ? mainIds : ids; // Is null for a page that was never loaded.\n\n    var finalTotal = typeof total === 'undefined' ? mainTotal : total;\n    var allRecords = get(state.admin.resources, [resource, 'data'], defaultData); // poor man's useMemo inside a hook using a ref\n\n    if (memo.current.finalIds !== finalIds || memo.current.finalTotal !== finalTotal || memo.current.allRecords !== allRecords) {\n      var result = {\n        finalIds: finalIds,\n        finalTotal: finalTotal,\n        allRecords: allRecords\n      };\n      memo.current = {\n        finalIds: finalIds,\n        finalTotal: finalTotal,\n        allRecords: allRecords,\n        result: result\n      };\n    }\n\n    return memo.current.result;\n  }, function () {\n    return null;\n  }, isDataLoaded),\n      _b = _a.data,\n      finalIds = _b.finalIds,\n      finalTotal = _b.finalTotal,\n      allRecords = _b.allRecords,\n      error = _a.error,\n      loading = _a.loading,\n      loaded = _a.loaded;\n\n  var data = useMemo(function () {\n    return typeof finalIds === 'undefined' ? defaultData : finalIds.map(function (id) {\n      return allRecords[id];\n    }).reduce(function (acc, record) {\n      if (!record) return acc;\n      acc[record.id] = record;\n      return acc;\n    }, {});\n  }, [finalIds, allRecords]);\n  return {\n    data: data,\n    ids: typeof finalIds === 'undefined' ? defaultIds : finalIds,\n    total: finalTotal,\n    error: error,\n    loading: loading,\n    loaded: loaded\n  };\n};\n\nvar isDataLoaded = function (data) {\n  return data.finalTotal != null;\n}; // null or undefined","map":{"version":3,"sources":["/node_modules/ra-core/esm/dataProvider/useGetMainList.js"],"names":["useMemo","useRef","get","useQueryWithStore","defaultIds","defaultData","useGetMainList","resource","pagination","sort","filter","options","requestSignature","JSON","stringify","memo","_a","type","payload","state","ids","admin","resources","total","mainIds","mainTotal","finalIds","finalTotal","allRecords","current","result","isDataLoaded","_b","data","error","loading","loaded","map","id","reduce","acc","record"],"mappings":"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","sourcesContent":["import { useMemo, useRef } from 'react';\nimport get from 'lodash/get';\nimport useQueryWithStore from './useQueryWithStore';\nvar defaultIds = [];\nvar defaultData = {};\n/**\n * Call the dataProvider.getList() method and return the resolved result\n * as well as the loading state.\n *\n * Uses a special cache to avoid showing an empty list while re-fetching the\n * list after changing params.\n *\n * The return value updates according to the request state:\n *\n * - start: { loading: true, loaded: false }\n * - success: { data: [data from store], ids: [ids from response], total: [total from response], loading: false, loaded: true }\n * - error: { error: [error from response], loading: false, loaded: true }\n *\n * This hook will return the cached result when called a second time\n * with the same parameters, until the response arrives.\n *\n * @param {string} resource The resource name, e.g. 'posts'\n * @param {Object} pagination The request pagination { page, perPage }, e.g. { page: 1, perPage: 10 }\n * @param {Object} sort The request sort { field, order }, e.g. { field: 'id', order: 'DESC' }\n * @param {Object} filter The request filters, e.g. { title: 'hello, world' }\n * @param {Object} options Options object to pass to the dataProvider. May include side effects to be executed upon success or failure, e.g. { onSuccess: { refresh: true } }\n *\n * @returns The current request state. Destructure as { data, total, ids, error, loading, loaded }.\n *\n * @example\n *\n * import { useGetMainList } from 'react-admin';\n *\n * const LatestNews = () => {\n *     const { data, ids, loading, error } = useGetMainList(\n *         'posts',\n *         { page: 1, perPage: 10 },\n *         { field: 'published_at', order: 'DESC' }\n *     );\n *     if (loading) { return <Loading />; }\n *     if (error) { return <p>ERROR</p>; }\n *     return <ul>{ids.map(id =>\n *         <li key={id}>{data[id].title}</li>\n *     )}</ul>;\n * };\n */\nexport var useGetMainList = function (resource, pagination, sort, filter, options) {\n    var requestSignature = JSON.stringify({ pagination: pagination, sort: sort, filter: filter });\n    var memo = useRef({});\n    var _a = useQueryWithStore({ type: 'getList', resource: resource, payload: { pagination: pagination, sort: sort, filter: filter } }, options, \n    // ids and data selector\n    function (state) {\n        var ids = get(state.admin.resources, [\n            resource,\n            'list',\n            'cachedRequests',\n            requestSignature,\n            'ids',\n        ]); // default value undefined\n        var total = get(state.admin.resources, [\n            resource,\n            'list',\n            'cachedRequests',\n            requestSignature,\n            'total',\n        ]); // default value undefined\n        // When the user changes the page/sort/filter, the list of ids from\n        // the cached requests is empty. To avoid rendering an empty list\n        // at that moment, we override the ids and total with the latest\n        // loaded ones.\n        var mainIds = get(state.admin.resources, [\n            resource,\n            'list',\n            'ids',\n        ]); // default value [] (see list.ids reducer)\n        // Since the total can be empty during the loading phase\n        // We need to override that total with the latest loaded one\n        var mainTotal = get(state.admin.resources, [\n            resource,\n            'list',\n            'total',\n        ]); // default value null (see list.total reducer)\n        // Is [] for a page that was never loaded\n        var finalIds = typeof ids === 'undefined' ? mainIds : ids;\n        // Is null for a page that was never loaded.\n        var finalTotal = typeof total === 'undefined' ? mainTotal : total;\n        var allRecords = get(state.admin.resources, [resource, 'data'], defaultData);\n        // poor man's useMemo inside a hook using a ref\n        if (memo.current.finalIds !== finalIds ||\n            memo.current.finalTotal !== finalTotal ||\n            memo.current.allRecords !== allRecords) {\n            var result = {\n                finalIds: finalIds,\n                finalTotal: finalTotal,\n                allRecords: allRecords,\n            };\n            memo.current = { finalIds: finalIds, finalTotal: finalTotal, allRecords: allRecords, result: result };\n        }\n        return memo.current.result;\n    }, function () { return null; }, isDataLoaded), _b = _a.data, finalIds = _b.finalIds, finalTotal = _b.finalTotal, allRecords = _b.allRecords, error = _a.error, loading = _a.loading, loaded = _a.loaded;\n    var data = useMemo(function () {\n        return typeof finalIds === 'undefined'\n            ? defaultData\n            : finalIds\n                .map(function (id) { return allRecords[id]; })\n                .reduce(function (acc, record) {\n                if (!record)\n                    return acc;\n                acc[record.id] = record;\n                return acc;\n            }, {});\n    }, [finalIds, allRecords]);\n    return {\n        data: data,\n        ids: typeof finalIds === 'undefined' ? defaultIds : finalIds,\n        total: finalTotal,\n        error: error,\n        loading: loading,\n        loaded: loaded,\n    };\n};\nvar isDataLoaded = function (data) { return data.finalTotal != null; }; // null or undefined\n"]},"metadata":{},"sourceType":"module"}