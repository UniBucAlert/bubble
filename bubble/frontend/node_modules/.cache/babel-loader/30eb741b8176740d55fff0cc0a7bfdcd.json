{"ast":null,"code":"import { useContext } from 'react';\nimport { TranslatableContext } from './TranslatableContext';\n/**\n * Gives access to the current TranslatableContext.\n *\n * @example\n * <TranslatableFields\n *     selector={<MyLanguageSelector />}\n *     locales={['en', 'fr']}\n * >\n *     <TextField source={getSource('title')} />\n * <TranslatableFields>\n *\n * const MyLanguageSelector = () => {\n *     const {\n *         locales,\n *         selectedLocale,\n *         selectLocale,\n *     } = useTranslatableContext();\n *\n *     return (\n *         <select onChange={selectLocale}>\n *             {locales.map((locale) => (\n *                 <option selected={locale.locale === selectedLocale}>\n *                     {locale.name}\n *                 </option>\n *             ))}\n *        </select>\n *     );\n * }\n */\n\nexport var useTranslatableContext = function () {\n  var context = useContext(TranslatableContext);\n\n  if (!context) {\n    throw new Error('useTranslatableContext must be used inside a TranslatableContextProvider');\n  }\n\n  return context;\n};","map":{"version":3,"sources":["/node_modules/ra-core/esm/i18n/useTranslatableContext.js"],"names":["useContext","TranslatableContext","useTranslatableContext","context","Error"],"mappings":"AAAA,SAASA,UAAT,QAA2B,OAA3B;AACA,SAASC,mBAAT,QAAqC,uBAArC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIC,sBAAsB,GAAG,YAAY;AAC5C,MAAIC,OAAO,GAAGH,UAAU,CAACC,mBAAD,CAAxB;;AACA,MAAI,CAACE,OAAL,EAAc;AACV,UAAM,IAAIC,KAAJ,CAAU,0EAAV,CAAN;AACH;;AACD,SAAOD,OAAP;AACH,CANM","sourcesContent":["import { useContext } from 'react';\nimport { TranslatableContext, } from './TranslatableContext';\n/**\n * Gives access to the current TranslatableContext.\n *\n * @example\n * <TranslatableFields\n *     selector={<MyLanguageSelector />}\n *     locales={['en', 'fr']}\n * >\n *     <TextField source={getSource('title')} />\n * <TranslatableFields>\n *\n * const MyLanguageSelector = () => {\n *     const {\n *         locales,\n *         selectedLocale,\n *         selectLocale,\n *     } = useTranslatableContext();\n *\n *     return (\n *         <select onChange={selectLocale}>\n *             {locales.map((locale) => (\n *                 <option selected={locale.locale === selectedLocale}>\n *                     {locale.name}\n *                 </option>\n *             ))}\n *        </select>\n *     );\n * }\n */\nexport var useTranslatableContext = function () {\n    var context = useContext(TranslatableContext);\n    if (!context) {\n        throw new Error('useTranslatableContext must be used inside a TranslatableContextProvider');\n    }\n    return context;\n};\n"]},"metadata":{},"sourceType":"module"}