{"ast":null,"code":"import { useContext, useMemo } from 'react';\nimport merge from 'lodash/merge';\nimport { ShowContext } from './ShowContext';\n/**\n * Hook to read the show controller props from the ShowContext.\n *\n * Mostly used within a <ShowContext.Provider> (e.g. as a descendent of <Show>).\n *\n * But you can also use it without a <ShowContext.Provider>. In this case, it is up to you\n * to pass all the necessary props.\n *\n * The given props will take precedence over context values.\n *\n * @typedef {Object} ShowControllerProps\n *\n * @returns {ShowControllerProps} create controller props\n *\n * @see useShowController for how it is filled\n *\n */\n\nexport var useShowContext = function (props) {\n  // Can't find a way to specify the RecordType when ShowContext is declared\n  // @ts-ignore\n  var context = useContext(ShowContext); // Props take precedence over the context\n\n  return useMemo(function () {\n    return merge({}, context, props != null ? extractShowContextProps(props) : {});\n  }, [context, props]);\n};\n/**\n * Extract only the show controller props\n *\n * @param {Object} props props passed to the useShowContext hook\n *\n * @returns {ShowControllerProps} show controller props\n */\n\nvar extractShowContextProps = function (_a) {\n  var basePath = _a.basePath,\n      record = _a.record,\n      data = _a.data,\n      defaultTitle = _a.defaultTitle,\n      loaded = _a.loaded,\n      loading = _a.loading,\n      resource = _a.resource,\n      version = _a.version;\n  return {\n    basePath: basePath,\n    // Necessary for actions (EditActions) which expect a data prop containing the record\n    // @deprecated - to be removed in 4.0d\n    record: record || data,\n    data: record || data,\n    defaultTitle: defaultTitle,\n    loaded: loaded,\n    loading: loading,\n    resource: resource,\n    version: version\n  };\n};","map":{"version":3,"sources":["/node_modules/ra-core/esm/controller/details/useShowContext.js"],"names":["useContext","useMemo","merge","ShowContext","useShowContext","props","context","extractShowContextProps","_a","basePath","record","data","defaultTitle","loaded","loading","resource","version"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,OAArB,QAAoC,OAApC;AACA,OAAOC,KAAP,MAAkB,cAAlB;AACA,SAASC,WAAT,QAA4B,eAA5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIC,cAAc,GAAG,UAAUC,KAAV,EAAiB;AACzC;AACA;AACA,MAAIC,OAAO,GAAGN,UAAU,CAACG,WAAD,CAAxB,CAHyC,CAIzC;;AACA,SAAOF,OAAO,CAAC,YAAY;AACvB,WAAOC,KAAK,CAAC,EAAD,EAAKI,OAAL,EAAcD,KAAK,IAAI,IAAT,GAAgBE,uBAAuB,CAACF,KAAD,CAAvC,GAAiD,EAA/D,CAAZ;AACH,GAFa,EAEX,CAACC,OAAD,EAAUD,KAAV,CAFW,CAAd;AAGH,CARM;AASP;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIE,uBAAuB,GAAG,UAAUC,EAAV,EAAc;AACxC,MAAIC,QAAQ,GAAGD,EAAE,CAACC,QAAlB;AAAA,MAA4BC,MAAM,GAAGF,EAAE,CAACE,MAAxC;AAAA,MAAgDC,IAAI,GAAGH,EAAE,CAACG,IAA1D;AAAA,MAAgEC,YAAY,GAAGJ,EAAE,CAACI,YAAlF;AAAA,MAAgGC,MAAM,GAAGL,EAAE,CAACK,MAA5G;AAAA,MAAoHC,OAAO,GAAGN,EAAE,CAACM,OAAjI;AAAA,MAA0IC,QAAQ,GAAGP,EAAE,CAACO,QAAxJ;AAAA,MAAkKC,OAAO,GAAGR,EAAE,CAACQ,OAA/K;AACA,SAAQ;AACJP,IAAAA,QAAQ,EAAEA,QADN;AAEJ;AACA;AACAC,IAAAA,MAAM,EAAEA,MAAM,IAAIC,IAJd;AAKJA,IAAAA,IAAI,EAAED,MAAM,IAAIC,IALZ;AAMJC,IAAAA,YAAY,EAAEA,YANV;AAOJC,IAAAA,MAAM,EAAEA,MAPJ;AAQJC,IAAAA,OAAO,EAAEA,OARL;AASJC,IAAAA,QAAQ,EAAEA,QATN;AAUJC,IAAAA,OAAO,EAAEA;AAVL,GAAR;AAYH,CAdD","sourcesContent":["import { useContext, useMemo } from 'react';\nimport merge from 'lodash/merge';\nimport { ShowContext } from './ShowContext';\n/**\n * Hook to read the show controller props from the ShowContext.\n *\n * Mostly used within a <ShowContext.Provider> (e.g. as a descendent of <Show>).\n *\n * But you can also use it without a <ShowContext.Provider>. In this case, it is up to you\n * to pass all the necessary props.\n *\n * The given props will take precedence over context values.\n *\n * @typedef {Object} ShowControllerProps\n *\n * @returns {ShowControllerProps} create controller props\n *\n * @see useShowController for how it is filled\n *\n */\nexport var useShowContext = function (props) {\n    // Can't find a way to specify the RecordType when ShowContext is declared\n    // @ts-ignore\n    var context = useContext(ShowContext);\n    // Props take precedence over the context\n    return useMemo(function () {\n        return merge({}, context, props != null ? extractShowContextProps(props) : {});\n    }, [context, props]);\n};\n/**\n * Extract only the show controller props\n *\n * @param {Object} props props passed to the useShowContext hook\n *\n * @returns {ShowControllerProps} show controller props\n */\nvar extractShowContextProps = function (_a) {\n    var basePath = _a.basePath, record = _a.record, data = _a.data, defaultTitle = _a.defaultTitle, loaded = _a.loaded, loading = _a.loading, resource = _a.resource, version = _a.version;\n    return ({\n        basePath: basePath,\n        // Necessary for actions (EditActions) which expect a data prop containing the record\n        // @deprecated - to be removed in 4.0d\n        record: record || data,\n        data: record || data,\n        defaultTitle: defaultTitle,\n        loaded: loaded,\n        loading: loading,\n        resource: resource,\n        version: version,\n    });\n};\n"]},"metadata":{},"sourceType":"module"}