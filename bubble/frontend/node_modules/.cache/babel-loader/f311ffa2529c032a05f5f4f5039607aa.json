{"ast":null,"code":"import { performOptimisticQuery } from './performOptimisticQuery';\nimport { performUndoableQuery } from './performUndoableQuery';\nimport { performPessimisticQuery } from './performPessimisticQuery';\nimport { answerWithCache } from './answerWithCache';\nimport { canReplyWithCache } from '../replyWithCache';\n/**\n * Execute a dataProvider call\n *\n * Delegates execution to cache, optimistic, undoable, or pessimistic queries\n *\n * @see useDataProvider\n */\n\nexport var doQuery = function (_a) {\n  var type = _a.type,\n      payload = _a.payload,\n      resource = _a.resource,\n      action = _a.action,\n      rest = _a.rest,\n      onSuccess = _a.onSuccess,\n      onFailure = _a.onFailure,\n      dataProvider = _a.dataProvider,\n      dispatch = _a.dispatch,\n      logoutIfAccessDenied = _a.logoutIfAccessDenied,\n      allArguments = _a.allArguments,\n      store = _a.store,\n      mutationMode = _a.mutationMode;\n  var resourceState = store.getState().admin.resources[resource];\n\n  if (canReplyWithCache(type, payload, resourceState)) {\n    return answerWithCache({\n      type: type,\n      payload: payload,\n      resource: resource,\n      action: action,\n      rest: rest,\n      onSuccess: onSuccess,\n      resourceState: resourceState,\n      dispatch: dispatch\n    });\n  } else if (mutationMode === 'optimistic') {\n    return performOptimisticQuery({\n      type: type,\n      payload: payload,\n      resource: resource,\n      action: action,\n      rest: rest,\n      onSuccess: onSuccess,\n      onFailure: onFailure,\n      dataProvider: dataProvider,\n      dispatch: dispatch,\n      logoutIfAccessDenied: logoutIfAccessDenied,\n      allArguments: allArguments\n    });\n  } else if (mutationMode === 'undoable') {\n    return performUndoableQuery({\n      type: type,\n      payload: payload,\n      resource: resource,\n      action: action,\n      rest: rest,\n      onSuccess: onSuccess,\n      onFailure: onFailure,\n      dataProvider: dataProvider,\n      dispatch: dispatch,\n      logoutIfAccessDenied: logoutIfAccessDenied,\n      allArguments: allArguments\n    });\n  } else {\n    return performPessimisticQuery({\n      type: type,\n      payload: payload,\n      resource: resource,\n      action: action,\n      rest: rest,\n      onSuccess: onSuccess,\n      onFailure: onFailure,\n      dataProvider: dataProvider,\n      dispatch: dispatch,\n      logoutIfAccessDenied: logoutIfAccessDenied,\n      allArguments: allArguments\n    });\n  }\n};","map":{"version":3,"sources":["/node_modules/ra-core/esm/dataProvider/performQuery/doQuery.js"],"names":["performOptimisticQuery","performUndoableQuery","performPessimisticQuery","answerWithCache","canReplyWithCache","doQuery","_a","type","payload","resource","action","rest","onSuccess","onFailure","dataProvider","dispatch","logoutIfAccessDenied","allArguments","store","mutationMode","resourceState","getState","admin","resources"],"mappings":"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","sourcesContent":["import { performOptimisticQuery } from './performOptimisticQuery';\nimport { performUndoableQuery } from './performUndoableQuery';\nimport { performPessimisticQuery } from './performPessimisticQuery';\nimport { answerWithCache } from './answerWithCache';\nimport { canReplyWithCache } from '../replyWithCache';\n/**\n * Execute a dataProvider call\n *\n * Delegates execution to cache, optimistic, undoable, or pessimistic queries\n *\n * @see useDataProvider\n */\nexport var doQuery = function (_a) {\n    var type = _a.type, payload = _a.payload, resource = _a.resource, action = _a.action, rest = _a.rest, onSuccess = _a.onSuccess, onFailure = _a.onFailure, dataProvider = _a.dataProvider, dispatch = _a.dispatch, logoutIfAccessDenied = _a.logoutIfAccessDenied, allArguments = _a.allArguments, store = _a.store, mutationMode = _a.mutationMode;\n    var resourceState = store.getState().admin.resources[resource];\n    if (canReplyWithCache(type, payload, resourceState)) {\n        return answerWithCache({\n            type: type,\n            payload: payload,\n            resource: resource,\n            action: action,\n            rest: rest,\n            onSuccess: onSuccess,\n            resourceState: resourceState,\n            dispatch: dispatch,\n        });\n    }\n    else if (mutationMode === 'optimistic') {\n        return performOptimisticQuery({\n            type: type,\n            payload: payload,\n            resource: resource,\n            action: action,\n            rest: rest,\n            onSuccess: onSuccess,\n            onFailure: onFailure,\n            dataProvider: dataProvider,\n            dispatch: dispatch,\n            logoutIfAccessDenied: logoutIfAccessDenied,\n            allArguments: allArguments,\n        });\n    }\n    else if (mutationMode === 'undoable') {\n        return performUndoableQuery({\n            type: type,\n            payload: payload,\n            resource: resource,\n            action: action,\n            rest: rest,\n            onSuccess: onSuccess,\n            onFailure: onFailure,\n            dataProvider: dataProvider,\n            dispatch: dispatch,\n            logoutIfAccessDenied: logoutIfAccessDenied,\n            allArguments: allArguments,\n        });\n    }\n    else {\n        return performPessimisticQuery({\n            type: type,\n            payload: payload,\n            resource: resource,\n            action: action,\n            rest: rest,\n            onSuccess: onSuccess,\n            onFailure: onFailure,\n            dataProvider: dataProvider,\n            dispatch: dispatch,\n            logoutIfAccessDenied: logoutIfAccessDenied,\n            allArguments: allArguments,\n        });\n    }\n};\n"]},"metadata":{},"sourceType":"module"}