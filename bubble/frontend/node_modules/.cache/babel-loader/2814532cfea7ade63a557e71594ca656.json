{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport validateResponseFormat from '../validateResponseFormat';\nimport getFetchType from '../getFetchType';\nimport { FETCH_END, FETCH_ERROR, FETCH_START } from '../../actions/fetchActions';\n/**\n * In pessimistic mode, the useDataProvider hook calls the dataProvider. When a\n * successful response arrives, the hook dispatches a SUCCESS action, executes\n * success side effects and returns the response. If the response is an error,\n * the hook dispatches a FAILURE action, executes failure side effects, and\n * throws an error.\n */\n\nexport var performPessimisticQuery = function (_a) {\n  var type = _a.type,\n      payload = _a.payload,\n      resource = _a.resource,\n      action = _a.action,\n      rest = _a.rest,\n      onSuccess = _a.onSuccess,\n      onFailure = _a.onFailure,\n      dataProvider = _a.dataProvider,\n      dispatch = _a.dispatch,\n      logoutIfAccessDenied = _a.logoutIfAccessDenied,\n      allArguments = _a.allArguments;\n  dispatch({\n    type: action,\n    payload: payload,\n    meta: __assign({\n      resource: resource\n    }, rest)\n  });\n  dispatch({\n    type: action + \"_LOADING\",\n    payload: payload,\n    meta: __assign({\n      resource: resource\n    }, rest)\n  });\n  dispatch({\n    type: FETCH_START\n  });\n\n  try {\n    return dataProvider[type].apply(dataProvider, typeof resource !== 'undefined' ? [resource, payload] : allArguments).then(function (response) {\n      if (process.env.NODE_ENV !== 'production') {\n        validateResponseFormat(response, type);\n      }\n\n      dispatch({\n        type: action + \"_SUCCESS\",\n        payload: response,\n        requestPayload: payload,\n        meta: __assign(__assign({}, rest), {\n          resource: resource,\n          fetchResponse: getFetchType(type),\n          fetchStatus: FETCH_END\n        })\n      });\n      dispatch({\n        type: FETCH_END\n      });\n      onSuccess && onSuccess(response);\n      return response;\n    }).catch(function (error) {\n      if (process.env.NODE_ENV !== 'production') {\n        console.error(error);\n      }\n\n      return logoutIfAccessDenied(error).then(function (loggedOut) {\n        if (loggedOut) return;\n        dispatch({\n          type: action + \"_FAILURE\",\n          error: error.message ? error.message : error,\n          payload: error.body ? error.body : null,\n          requestPayload: payload,\n          meta: __assign(__assign({}, rest), {\n            resource: resource,\n            fetchResponse: getFetchType(type),\n            fetchStatus: FETCH_ERROR\n          })\n        });\n        dispatch({\n          type: FETCH_ERROR,\n          error: error\n        });\n        onFailure && onFailure(error);\n        throw error;\n      });\n    });\n  } catch (e) {\n    if (process.env.NODE_ENV !== 'production') {\n      console.error(e);\n    }\n\n    throw new Error('The dataProvider threw an error. It should return a rejected Promise instead.');\n  }\n};","map":{"version":3,"sources":["/node_modules/ra-core/esm/dataProvider/performQuery/performPessimisticQuery.js"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","validateResponseFormat","getFetchType","FETCH_END","FETCH_ERROR","FETCH_START","performPessimisticQuery","_a","type","payload","resource","action","rest","onSuccess","onFailure","dataProvider","dispatch","logoutIfAccessDenied","allArguments","meta","then","response","process","env","NODE_ENV","requestPayload","fetchResponse","fetchStatus","catch","error","console","loggedOut","message","body","e","Error"],"mappings":"AAAA,IAAIA,QAAQ,GAAI,QAAQ,KAAKA,QAAd,IAA2B,YAAY;AAClDA,EAAAA,QAAQ,GAAGC,MAAM,CAACC,MAAP,IAAiB,UAASC,CAAT,EAAY;AACpC,SAAK,IAAIC,CAAJ,EAAOC,CAAC,GAAG,CAAX,EAAcC,CAAC,GAAGC,SAAS,CAACC,MAAjC,EAAyCH,CAAC,GAAGC,CAA7C,EAAgDD,CAAC,EAAjD,EAAqD;AACjDD,MAAAA,CAAC,GAAGG,SAAS,CAACF,CAAD,CAAb;;AACA,WAAK,IAAII,CAAT,IAAcL,CAAd,EAAiB,IAAIH,MAAM,CAACS,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCR,CAArC,EAAwCK,CAAxC,CAAJ,EACbN,CAAC,CAACM,CAAD,CAAD,GAAOL,CAAC,CAACK,CAAD,CAAR;AACP;;AACD,WAAON,CAAP;AACH,GAPD;;AAQA,SAAOH,QAAQ,CAACa,KAAT,CAAe,IAAf,EAAqBN,SAArB,CAAP;AACH,CAVD;;AAWA,OAAOO,sBAAP,MAAmC,2BAAnC;AACA,OAAOC,YAAP,MAAyB,iBAAzB;AACA,SAASC,SAAT,EAAoBC,WAApB,EAAiCC,WAAjC,QAAqD,4BAArD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIC,uBAAuB,GAAG,UAAUC,EAAV,EAAc;AAC/C,MAAIC,IAAI,GAAGD,EAAE,CAACC,IAAd;AAAA,MAAoBC,OAAO,GAAGF,EAAE,CAACE,OAAjC;AAAA,MAA0CC,QAAQ,GAAGH,EAAE,CAACG,QAAxD;AAAA,MAAkEC,MAAM,GAAGJ,EAAE,CAACI,MAA9E;AAAA,MAAsFC,IAAI,GAAGL,EAAE,CAACK,IAAhG;AAAA,MAAsGC,SAAS,GAAGN,EAAE,CAACM,SAArH;AAAA,MAAgIC,SAAS,GAAGP,EAAE,CAACO,SAA/I;AAAA,MAA0JC,YAAY,GAAGR,EAAE,CAACQ,YAA5K;AAAA,MAA0LC,QAAQ,GAAGT,EAAE,CAACS,QAAxM;AAAA,MAAkNC,oBAAoB,GAAGV,EAAE,CAACU,oBAA5O;AAAA,MAAkQC,YAAY,GAAGX,EAAE,CAACW,YAApR;AACAF,EAAAA,QAAQ,CAAC;AACLR,IAAAA,IAAI,EAAEG,MADD;AAELF,IAAAA,OAAO,EAAEA,OAFJ;AAGLU,IAAAA,IAAI,EAAEhC,QAAQ,CAAC;AAAEuB,MAAAA,QAAQ,EAAEA;AAAZ,KAAD,EAAyBE,IAAzB;AAHT,GAAD,CAAR;AAKAI,EAAAA,QAAQ,CAAC;AACLR,IAAAA,IAAI,EAAEG,MAAM,GAAG,UADV;AAELF,IAAAA,OAAO,EAAEA,OAFJ;AAGLU,IAAAA,IAAI,EAAEhC,QAAQ,CAAC;AAAEuB,MAAAA,QAAQ,EAAEA;AAAZ,KAAD,EAAyBE,IAAzB;AAHT,GAAD,CAAR;AAKAI,EAAAA,QAAQ,CAAC;AAAER,IAAAA,IAAI,EAAEH;AAAR,GAAD,CAAR;;AACA,MAAI;AACA,WAAOU,YAAY,CAACP,IAAD,CAAZ,CACFR,KADE,CACIe,YADJ,EACkB,OAAOL,QAAP,KAAoB,WAApB,GACnB,CAACA,QAAD,EAAWD,OAAX,CADmB,GAEnBS,YAHC,EAIFE,IAJE,CAIG,UAAUC,QAAV,EAAoB;AAC1B,UAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACvCvB,QAAAA,sBAAsB,CAACoB,QAAD,EAAWb,IAAX,CAAtB;AACH;;AACDQ,MAAAA,QAAQ,CAAC;AACLR,QAAAA,IAAI,EAAEG,MAAM,GAAG,UADV;AAELF,QAAAA,OAAO,EAAEY,QAFJ;AAGLI,QAAAA,cAAc,EAAEhB,OAHX;AAILU,QAAAA,IAAI,EAAEhC,QAAQ,CAACA,QAAQ,CAAC,EAAD,EAAKyB,IAAL,CAAT,EAAqB;AAAEF,UAAAA,QAAQ,EAAEA,QAAZ;AAAsBgB,UAAAA,aAAa,EAAExB,YAAY,CAACM,IAAD,CAAjD;AAAyDmB,UAAAA,WAAW,EAAExB;AAAtE,SAArB;AAJT,OAAD,CAAR;AAMAa,MAAAA,QAAQ,CAAC;AAAER,QAAAA,IAAI,EAAEL;AAAR,OAAD,CAAR;AACAU,MAAAA,SAAS,IAAIA,SAAS,CAACQ,QAAD,CAAtB;AACA,aAAOA,QAAP;AACH,KAjBM,EAkBFO,KAlBE,CAkBI,UAAUC,KAAV,EAAiB;AACxB,UAAIP,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACvCM,QAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACH;;AACD,aAAOZ,oBAAoB,CAACY,KAAD,CAApB,CAA4BT,IAA5B,CAAiC,UAAUW,SAAV,EAAqB;AACzD,YAAIA,SAAJ,EACI;AACJf,QAAAA,QAAQ,CAAC;AACLR,UAAAA,IAAI,EAAEG,MAAM,GAAG,UADV;AAELkB,UAAAA,KAAK,EAAEA,KAAK,CAACG,OAAN,GAAgBH,KAAK,CAACG,OAAtB,GAAgCH,KAFlC;AAGLpB,UAAAA,OAAO,EAAEoB,KAAK,CAACI,IAAN,GAAaJ,KAAK,CAACI,IAAnB,GAA0B,IAH9B;AAILR,UAAAA,cAAc,EAAEhB,OAJX;AAKLU,UAAAA,IAAI,EAAEhC,QAAQ,CAACA,QAAQ,CAAC,EAAD,EAAKyB,IAAL,CAAT,EAAqB;AAAEF,YAAAA,QAAQ,EAAEA,QAAZ;AAAsBgB,YAAAA,aAAa,EAAExB,YAAY,CAACM,IAAD,CAAjD;AAAyDmB,YAAAA,WAAW,EAAEvB;AAAtE,WAArB;AALT,SAAD,CAAR;AAOAY,QAAAA,QAAQ,CAAC;AAAER,UAAAA,IAAI,EAAEJ,WAAR;AAAqByB,UAAAA,KAAK,EAAEA;AAA5B,SAAD,CAAR;AACAf,QAAAA,SAAS,IAAIA,SAAS,CAACe,KAAD,CAAtB;AACA,cAAMA,KAAN;AACH,OAbM,CAAP;AAcH,KApCM,CAAP;AAqCH,GAtCD,CAuCA,OAAOK,CAAP,EAAU;AACN,QAAIZ,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACvCM,MAAAA,OAAO,CAACD,KAAR,CAAcK,CAAd;AACH;;AACD,UAAM,IAAIC,KAAJ,CAAU,+EAAV,CAAN;AACH;AACJ,CA1DM","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport validateResponseFormat from '../validateResponseFormat';\nimport getFetchType from '../getFetchType';\nimport { FETCH_END, FETCH_ERROR, FETCH_START, } from '../../actions/fetchActions';\n/**\n * In pessimistic mode, the useDataProvider hook calls the dataProvider. When a\n * successful response arrives, the hook dispatches a SUCCESS action, executes\n * success side effects and returns the response. If the response is an error,\n * the hook dispatches a FAILURE action, executes failure side effects, and\n * throws an error.\n */\nexport var performPessimisticQuery = function (_a) {\n    var type = _a.type, payload = _a.payload, resource = _a.resource, action = _a.action, rest = _a.rest, onSuccess = _a.onSuccess, onFailure = _a.onFailure, dataProvider = _a.dataProvider, dispatch = _a.dispatch, logoutIfAccessDenied = _a.logoutIfAccessDenied, allArguments = _a.allArguments;\n    dispatch({\n        type: action,\n        payload: payload,\n        meta: __assign({ resource: resource }, rest),\n    });\n    dispatch({\n        type: action + \"_LOADING\",\n        payload: payload,\n        meta: __assign({ resource: resource }, rest),\n    });\n    dispatch({ type: FETCH_START });\n    try {\n        return dataProvider[type]\n            .apply(dataProvider, typeof resource !== 'undefined'\n            ? [resource, payload]\n            : allArguments)\n            .then(function (response) {\n            if (process.env.NODE_ENV !== 'production') {\n                validateResponseFormat(response, type);\n            }\n            dispatch({\n                type: action + \"_SUCCESS\",\n                payload: response,\n                requestPayload: payload,\n                meta: __assign(__assign({}, rest), { resource: resource, fetchResponse: getFetchType(type), fetchStatus: FETCH_END }),\n            });\n            dispatch({ type: FETCH_END });\n            onSuccess && onSuccess(response);\n            return response;\n        })\n            .catch(function (error) {\n            if (process.env.NODE_ENV !== 'production') {\n                console.error(error);\n            }\n            return logoutIfAccessDenied(error).then(function (loggedOut) {\n                if (loggedOut)\n                    return;\n                dispatch({\n                    type: action + \"_FAILURE\",\n                    error: error.message ? error.message : error,\n                    payload: error.body ? error.body : null,\n                    requestPayload: payload,\n                    meta: __assign(__assign({}, rest), { resource: resource, fetchResponse: getFetchType(type), fetchStatus: FETCH_ERROR }),\n                });\n                dispatch({ type: FETCH_ERROR, error: error });\n                onFailure && onFailure(error);\n                throw error;\n            });\n        });\n    }\n    catch (e) {\n        if (process.env.NODE_ENV !== 'production') {\n            console.error(e);\n        }\n        throw new Error('The dataProvider threw an error. It should return a rejected Promise instead.');\n    }\n};\n"]},"metadata":{},"sourceType":"module"}