{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { useCallback } from 'react';\nimport debounce from 'lodash/debounce';\nimport { useReferenceArrayInputController } from './useReferenceArrayInputController';\n/**\n * An Input component for fields containing a list of references to another resource.\n * Useful for 'hasMany' relationship.\n *\n * @example\n * The post object has many tags, so the post resource looks like:\n * {\n *    id: 1234,\n *    tag_ids: [ \"1\", \"23\", \"4\" ]\n * }\n *\n * ReferenceArrayInput component fetches the current resources (using\n * `dataProvider.getMany()`) as well as possible resources (using\n * `dataProvider.getList()` REST method) in the reference endpoint. It then\n * delegates rendering to a subcomponent, to which it passes the possible\n * choices as the `choices` attribute.\n *\n * Use it with a selector component as child, like `<SelectArrayInput>`\n * or <CheckboxGroupInput>.\n *\n * @example\n * export const PostEdit = (props) => (\n *     <Edit {...props}>\n *         <SimpleForm>\n *             <ReferenceArrayInput source=\"tag_ids\" reference=\"tags\">\n *                 <SelectArrayInput optionText=\"name\" />\n *             </ReferenceArrayInput>\n *         </SimpleForm>\n *     </Edit>\n * );\n *\n * By default, restricts the possible values to 25. You can extend this limit\n * by setting the `perPage` prop.\n *\n * @example\n * <ReferenceArrayInput\n *      source=\"tag_ids\"\n *      reference=\"tags\"\n *      perPage={100}>\n *     <SelectArrayInput optionText=\"name\" />\n * </ReferenceArrayInput>\n *\n * By default, orders the possible values by id desc. You can change this order\n * by setting the `sort` prop (an object with `field` and `order` properties).\n *\n * @example\n * <ReferenceArrayInput\n *      source=\"tag_ids\"\n *      reference=\"tags\"\n *      sort={{ field: 'name', order: 'ASC' }}>\n *     <SelectArrayInput optionText=\"name\" />\n * </ReferenceArrayInput>\n *\n * Also, you can filter the query used to populate the possible values. Use the\n * `filter` prop for that.\n *\n * @example\n * <ReferenceArrayInput\n *      source=\"tag_ids\"\n *      reference=\"tags\"\n *      filter={{ is_public: true }}>\n *     <SelectArrayInput optionText=\"name\" />\n * </ReferenceArrayInput>\n *\n * The enclosed component may filter results. ReferenceArrayInput passes a\n * `setFilter` function as prop to its child component. It uses the value to\n * create a filter for the query - by default { q: [searchText] }. You can\n * customize the mapping searchText => searchQuery by setting a custom\n * `filterToQuery` function prop:\n *\n * @example\n * <ReferenceArrayInput\n *      source=\"tag_ids\"\n *      reference=\"tags\"\n *      filterToQuery={searchText => ({ name: searchText })}>\n *     <SelectArrayInput optionText=\"name\" />\n * </ReferenceArrayInput>\n */\n\nvar ReferenceArrayInputController = function (_a) {\n  var basePath = _a.basePath,\n      children = _a.children,\n      _b = _a.filter,\n      filter = _b === void 0 ? {} : _b,\n      input = _a.input,\n      _c = _a.filterToQuery,\n      filterToQuery = _c === void 0 ? function (searchText) {\n    return {\n      q: searchText\n    };\n  } : _c,\n      _d = _a.perPage,\n      perPage = _d === void 0 ? 25 : _d,\n      reference = _a.reference,\n      resource = _a.resource,\n      _e = _a.sort,\n      sort = _e === void 0 ? {\n    field: 'id',\n    order: 'DESC'\n  } : _e,\n      source = _a.source;\n\n  var _f = useReferenceArrayInputController({\n    basePath: basePath,\n    filter: filter,\n    filterToQuery: filterToQuery,\n    input: input,\n    perPage: perPage,\n    sort: sort,\n    reference: reference,\n    resource: resource,\n    source: source\n  }),\n      setFilter = _f.setFilter,\n      controllerProps = __rest(_f, [\"setFilter\"]); // eslint-disable-next-line react-hooks/exhaustive-deps\n\n\n  var debouncedSetFilter = useCallback(debounce(setFilter, 500), [setFilter]);\n  return children(__assign(__assign({}, controllerProps), {\n    setFilter: debouncedSetFilter\n  }));\n};\n\nexport default ReferenceArrayInputController;","map":{"version":3,"sources":["/node_modules/ra-core/esm/controller/input/ReferenceArrayInputController.js"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","__rest","e","indexOf","getOwnPropertySymbols","propertyIsEnumerable","useCallback","debounce","useReferenceArrayInputController","ReferenceArrayInputController","_a","basePath","children","_b","filter","input","_c","filterToQuery","searchText","q","_d","perPage","reference","resource","_e","sort","field","order","source","_f","setFilter","controllerProps","debouncedSetFilter"],"mappings":"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","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { useCallback } from 'react';\nimport debounce from 'lodash/debounce';\nimport { useReferenceArrayInputController } from './useReferenceArrayInputController';\n/**\n * An Input component for fields containing a list of references to another resource.\n * Useful for 'hasMany' relationship.\n *\n * @example\n * The post object has many tags, so the post resource looks like:\n * {\n *    id: 1234,\n *    tag_ids: [ \"1\", \"23\", \"4\" ]\n * }\n *\n * ReferenceArrayInput component fetches the current resources (using\n * `dataProvider.getMany()`) as well as possible resources (using\n * `dataProvider.getList()` REST method) in the reference endpoint. It then\n * delegates rendering to a subcomponent, to which it passes the possible\n * choices as the `choices` attribute.\n *\n * Use it with a selector component as child, like `<SelectArrayInput>`\n * or <CheckboxGroupInput>.\n *\n * @example\n * export const PostEdit = (props) => (\n *     <Edit {...props}>\n *         <SimpleForm>\n *             <ReferenceArrayInput source=\"tag_ids\" reference=\"tags\">\n *                 <SelectArrayInput optionText=\"name\" />\n *             </ReferenceArrayInput>\n *         </SimpleForm>\n *     </Edit>\n * );\n *\n * By default, restricts the possible values to 25. You can extend this limit\n * by setting the `perPage` prop.\n *\n * @example\n * <ReferenceArrayInput\n *      source=\"tag_ids\"\n *      reference=\"tags\"\n *      perPage={100}>\n *     <SelectArrayInput optionText=\"name\" />\n * </ReferenceArrayInput>\n *\n * By default, orders the possible values by id desc. You can change this order\n * by setting the `sort` prop (an object with `field` and `order` properties).\n *\n * @example\n * <ReferenceArrayInput\n *      source=\"tag_ids\"\n *      reference=\"tags\"\n *      sort={{ field: 'name', order: 'ASC' }}>\n *     <SelectArrayInput optionText=\"name\" />\n * </ReferenceArrayInput>\n *\n * Also, you can filter the query used to populate the possible values. Use the\n * `filter` prop for that.\n *\n * @example\n * <ReferenceArrayInput\n *      source=\"tag_ids\"\n *      reference=\"tags\"\n *      filter={{ is_public: true }}>\n *     <SelectArrayInput optionText=\"name\" />\n * </ReferenceArrayInput>\n *\n * The enclosed component may filter results. ReferenceArrayInput passes a\n * `setFilter` function as prop to its child component. It uses the value to\n * create a filter for the query - by default { q: [searchText] }. You can\n * customize the mapping searchText => searchQuery by setting a custom\n * `filterToQuery` function prop:\n *\n * @example\n * <ReferenceArrayInput\n *      source=\"tag_ids\"\n *      reference=\"tags\"\n *      filterToQuery={searchText => ({ name: searchText })}>\n *     <SelectArrayInput optionText=\"name\" />\n * </ReferenceArrayInput>\n */\nvar ReferenceArrayInputController = function (_a) {\n    var basePath = _a.basePath, children = _a.children, _b = _a.filter, filter = _b === void 0 ? {} : _b, input = _a.input, _c = _a.filterToQuery, filterToQuery = _c === void 0 ? function (searchText) { return ({ q: searchText }); } : _c, _d = _a.perPage, perPage = _d === void 0 ? 25 : _d, reference = _a.reference, resource = _a.resource, _e = _a.sort, sort = _e === void 0 ? { field: 'id', order: 'DESC' } : _e, source = _a.source;\n    var _f = useReferenceArrayInputController({\n        basePath: basePath,\n        filter: filter,\n        filterToQuery: filterToQuery,\n        input: input,\n        perPage: perPage,\n        sort: sort,\n        reference: reference,\n        resource: resource,\n        source: source,\n    }), setFilter = _f.setFilter, controllerProps = __rest(_f, [\"setFilter\"]);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    var debouncedSetFilter = useCallback(debounce(setFilter, 500), [\n        setFilter,\n    ]);\n    return children(__assign(__assign({}, controllerProps), { setFilter: debouncedSetFilter }));\n};\nexport default ReferenceArrayInputController;\n"]},"metadata":{},"sourceType":"module"}