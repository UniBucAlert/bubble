{"ast":null,"code":"import * as React from 'react';\nimport { createContext, useRef } from 'react';\nexport var SideEffectContext = createContext({});\nexport var SideEffectContextProvider = function (_a) {\n  var children = _a.children,\n      value = _a.value;\n  return React.createElement(SideEffectContext.Provider, {\n    value: value\n  }, children);\n};\n/**\n * Get modifiers for a save() function, and the way to update them.\n *\n * Used in useCreateController and useEditController.\n *\n * @example\n *\n * const {\n *     onSuccessRef,\n *     setOnSuccess,\n *     onFailureRef,\n *     setOnFailure,\n *     transformRef,\n *     setTransform,\n * } = useSaveModifiers({ onSuccess, onFailure, transform });\n */\n\nexport var useSaveModifiers = function (_a) {\n  var onSuccess = _a.onSuccess,\n      onFailure = _a.onFailure,\n      transform = _a.transform;\n  var onSuccessRef = useRef(onSuccess);\n\n  var setOnSuccess = function (onSuccess) {\n    onSuccessRef.current = function (response) {\n      // reset onSuccess for next submission\n      onSuccessRef.current = undefined;\n      return onSuccess(response);\n    };\n  };\n\n  var onFailureRef = useRef(onFailure);\n\n  var setOnFailure = function (onFailure) {\n    onFailureRef.current = function (error) {\n      // reset onFailure for next submission\n      onFailureRef.current = undefined;\n      return onFailure(error);\n    };\n  };\n\n  var transformRef = useRef(transform);\n\n  var setTransform = function (transform) {\n    transformRef.current = function (data) {\n      // reset transform for next submission\n      transformRef.current = undefined;\n      return transform(data);\n    };\n  };\n\n  return {\n    onSuccessRef: onSuccessRef,\n    setOnSuccess: setOnSuccess,\n    onFailureRef: onFailureRef,\n    setOnFailure: setOnFailure,\n    transformRef: transformRef,\n    setTransform: setTransform\n  };\n};","map":{"version":3,"sources":["/node_modules/ra-core/esm/controller/saveModifiers.js"],"names":["React","createContext","useRef","SideEffectContext","SideEffectContextProvider","_a","children","value","createElement","Provider","useSaveModifiers","onSuccess","onFailure","transform","onSuccessRef","setOnSuccess","current","response","undefined","onFailureRef","setOnFailure","error","transformRef","setTransform","data"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,aAAT,EAAwBC,MAAxB,QAAsC,OAAtC;AACA,OAAO,IAAIC,iBAAiB,GAAGF,aAAa,CAAC,EAAD,CAArC;AACP,OAAO,IAAIG,yBAAyB,GAAG,UAAUC,EAAV,EAAc;AACjD,MAAIC,QAAQ,GAAGD,EAAE,CAACC,QAAlB;AAAA,MAA4BC,KAAK,GAAGF,EAAE,CAACE,KAAvC;AACA,SAAQP,KAAK,CAACQ,aAAN,CAAoBL,iBAAiB,CAACM,QAAtC,EAAgD;AAAEF,IAAAA,KAAK,EAAEA;AAAT,GAAhD,EAAkED,QAAlE,CAAR;AACH,CAHM;AAIP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAII,gBAAgB,GAAG,UAAUL,EAAV,EAAc;AACxC,MAAIM,SAAS,GAAGN,EAAE,CAACM,SAAnB;AAAA,MAA8BC,SAAS,GAAGP,EAAE,CAACO,SAA7C;AAAA,MAAwDC,SAAS,GAAGR,EAAE,CAACQ,SAAvE;AACA,MAAIC,YAAY,GAAGZ,MAAM,CAACS,SAAD,CAAzB;;AACA,MAAII,YAAY,GAAG,UAAUJ,SAAV,EAAqB;AACpCG,IAAAA,YAAY,CAACE,OAAb,GAAuB,UAAUC,QAAV,EAAoB;AACvC;AACAH,MAAAA,YAAY,CAACE,OAAb,GAAuBE,SAAvB;AACA,aAAOP,SAAS,CAACM,QAAD,CAAhB;AACH,KAJD;AAKH,GAND;;AAOA,MAAIE,YAAY,GAAGjB,MAAM,CAACU,SAAD,CAAzB;;AACA,MAAIQ,YAAY,GAAG,UAAUR,SAAV,EAAqB;AACpCO,IAAAA,YAAY,CAACH,OAAb,GAAuB,UAAUK,KAAV,EAAiB;AACpC;AACAF,MAAAA,YAAY,CAACH,OAAb,GAAuBE,SAAvB;AACA,aAAON,SAAS,CAACS,KAAD,CAAhB;AACH,KAJD;AAKH,GAND;;AAOA,MAAIC,YAAY,GAAGpB,MAAM,CAACW,SAAD,CAAzB;;AACA,MAAIU,YAAY,GAAG,UAAUV,SAAV,EAAqB;AACpCS,IAAAA,YAAY,CAACN,OAAb,GAAuB,UAAUQ,IAAV,EAAgB;AACnC;AACAF,MAAAA,YAAY,CAACN,OAAb,GAAuBE,SAAvB;AACA,aAAOL,SAAS,CAACW,IAAD,CAAhB;AACH,KAJD;AAKH,GAND;;AAOA,SAAO;AACHV,IAAAA,YAAY,EAAEA,YADX;AAEHC,IAAAA,YAAY,EAAEA,YAFX;AAGHI,IAAAA,YAAY,EAAEA,YAHX;AAIHC,IAAAA,YAAY,EAAEA,YAJX;AAKHE,IAAAA,YAAY,EAAEA,YALX;AAMHC,IAAAA,YAAY,EAAEA;AANX,GAAP;AAQH,CAlCM","sourcesContent":["import * as React from 'react';\nimport { createContext, useRef } from 'react';\nexport var SideEffectContext = createContext({});\nexport var SideEffectContextProvider = function (_a) {\n    var children = _a.children, value = _a.value;\n    return (React.createElement(SideEffectContext.Provider, { value: value }, children));\n};\n/**\n * Get modifiers for a save() function, and the way to update them.\n *\n * Used in useCreateController and useEditController.\n *\n * @example\n *\n * const {\n *     onSuccessRef,\n *     setOnSuccess,\n *     onFailureRef,\n *     setOnFailure,\n *     transformRef,\n *     setTransform,\n * } = useSaveModifiers({ onSuccess, onFailure, transform });\n */\nexport var useSaveModifiers = function (_a) {\n    var onSuccess = _a.onSuccess, onFailure = _a.onFailure, transform = _a.transform;\n    var onSuccessRef = useRef(onSuccess);\n    var setOnSuccess = function (onSuccess) {\n        onSuccessRef.current = function (response) {\n            // reset onSuccess for next submission\n            onSuccessRef.current = undefined;\n            return onSuccess(response);\n        };\n    };\n    var onFailureRef = useRef(onFailure);\n    var setOnFailure = function (onFailure) {\n        onFailureRef.current = function (error) {\n            // reset onFailure for next submission\n            onFailureRef.current = undefined;\n            return onFailure(error);\n        };\n    };\n    var transformRef = useRef(transform);\n    var setTransform = function (transform) {\n        transformRef.current = function (data) {\n            // reset transform for next submission\n            transformRef.current = undefined;\n            return transform(data);\n        };\n    };\n    return {\n        onSuccessRef: onSuccessRef,\n        setOnSuccess: setOnSuccess,\n        onFailureRef: onFailureRef,\n        setOnFailure: setOnFailure,\n        transformRef: transformRef,\n        setTransform: setTransform,\n    };\n};\n"]},"metadata":{},"sourceType":"module"}